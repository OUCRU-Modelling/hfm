[
  {
    "objectID": "sero_description.html#number-of-samples-per-district",
    "href": "sero_description.html#number-of-samples-per-district",
    "title": "3  Serological data description",
    "section": "3.1 Number of samples per district",
    "text": "3.1 Number of samples per district\n\n\nCode\ndata_pt %&gt;%\n  # filter(qhchuan == data_pt$qhchuan[1]) %&gt;%\n  ggplot() +\n  geom_bar(aes(x = col_time))+\n  scale_x_discrete(limits = c(\"Dec 2022\",\n                              \"Apr 2023\",\n                              \"Aug 2023\",\n                              \"Dec 2023\"))+\n  scale_y_continuous(breaks = seq(0,14,by=4),\n                     limits = c(0,14))+\n  facet_wrap(~qhchuan,\n             ncol = 5)+\n  labs(x = \"Collection date\",y = \"Number of samples\")+\n  theme_bw()\n\n\n\n\n\nFig 1"
  },
  {
    "objectID": "sero_description.html#age-serological-profiles-of-each-districts",
    "href": "sero_description.html#age-serological-profiles-of-each-districts",
    "title": "3  Serological data description",
    "section": "3.2 Age serological profiles of each districts",
    "text": "3.2 Age serological profiles of each districts\n\n\nCode\n# data_pt %&gt;%\n#   ggplot() +\n#   geom_bar(aes(fill = age_gr2,x = factor(col_time,levels = c(\"Dec 2022\",\n#                                                              \"Apr 2023\",\n#                                                              \"Aug 2023\",\n#                                                              \"Dec 2023\"))))+\n#   scale_y_continuous(breaks = seq(0,14,by=4),\n#                      limits = c(0,14))+\n#   scale_x_discrete(limits = c(\"Dec 2022\",\n#                               \"Apr 2023\",\n#                               \"Aug 2023\",\n#                               \"Dec 2023\"))+\n#   facet_wrap(~qhchuan,\n#              ncol = 5)+\n#   labs(fill = \"Age group\",y = \"Number of samples\",\n#        x =\"Collection date\")+\n#   theme_bw()+\n  ## axis.text.x = element_text(vjust = 0.5,angle = 45)\n  # theme(legend.position = \"top\")\n\n# data_pt %&gt;% ggplot() +\n#   geom_density(aes(x = age))+\n#   facet_wrap(~qhchuan,\n#              ncol = 5)+\n#   labs(x = \"Age group\",y = \"Number of samples\")+\n#   theme_bw()\n\ndata_pt %&gt;% ggplot() +\n  geom_bar(aes(x = age_gr3))+\n  facet_wrap(~qhchuan,\n             ncol = 5)+\n  scale_y_continuous(breaks = seq(0,10,by = 2),\n                     limits = c(0,10))+\n  labs(x = \"Age group\",y = \"Number of samples\")+\n  theme_bw()\n\n\n\n\n\nFig 2\n\n\n\n\nFig 2 shows the age structure of each district’s collection times. I divided continuous age variables into five groups: &lt;0 & ≤3 years old,&lt;3 & ≤6 years old,&lt;6 & ≤9 years old, &lt;9 & ≤12 years old,&lt;12 & ≤15 years old to facilitate the visualization (instead of visualizing 15 age group).\n\n\nCode\nselect_dis &lt;- c(\"10\", \"11\", \"12\", \"8\", \"binh chanh\", \"binh tan\", \"cu chi\", \"hoc mon\", \"tan binh\", \"tan phu\")\n\ndata_sle &lt;- data_pt %&gt;% filter(qhchuan %in% select_dis)\n\n## smooth function to fit\nbinomial_smooth &lt;- function(...) {\n    geom_smooth(method = \"glm\", method.args = list(family = \"binomial\"), ...)\n}\n\n\nIn this part, I used a generalized linear model for districts to fit the seropositive by age with formula \\(seropositive \\sim age + age^{2}\\).\n\n\nCode\n# data_sle  %&gt;% \n#   ggplot(aes(x = age, y = pos)) +\n#   geom_jitter(height = 0.05)+\n#   facet_wrap(vars(qhchuan,\n#                   factor(col_time,levels = c(\"Dec 2022\",\n#                                              \"Apr 2023\",\n#                                              \"Aug 2023\",\n#                                              \"Dec 2023\"))),ncol=4)+\n#   binomial_smooth(formula = y ~ x + I(x^2) )+\n#   labs(x = \"Collection date\", y  = \"Seroprevalence\")+\n#   theme_bw()\n\ndata_pt %&gt;% \n  ggplot(aes(x = age, y = pos)) +\n  geom_jitter(height = 0.05)+\n  # geom_point(shape = \"|\",size = 2,\n  #            col = \"#0808cf\")+\n  facet_wrap(~qhchuan,\n             ncol=5)+\n  binomial_smooth(formula = y ~ x + I(x^2))+\n  labs(x = \"Age\", y  = \"Seroprevalence\")+\n  theme_bw()\n\n\n\n\n\nFig 3\n\n\n\n\nFig 3 shows the result of the fitting process: visualization with seroprevalence (solid line) with a 95% confidence interval (coloured area) and serum sample (point)."
  },
  {
    "objectID": "sero_description.html#seroprevalence-in-the-same-age-group-over-time",
    "href": "sero_description.html#seroprevalence-in-the-same-age-group-over-time",
    "title": "3  Serological data description",
    "section": "3.3 Seroprevalence in the same age group over time",
    "text": "3.3 Seroprevalence in the same age group over time\n\n\nCode\ndata_pt$col_date &lt;- make_date(data_pt$col_year,data_pt$col_month,data_pt$col_day)\ndata_pt$age_gr &lt;- factor(data_pt$age_gr,\n                         levels = c(unique(data_pt$age_gr)))\n\n\n\n\nCode\n# | fig-width: 13\n# | fig-height: 8\n# | out-width: \"100%\"\n# | fig-cap: \"Fig 4\"\n\n# ggplot(data_pt,\n#        aes(x = col_date, y = pos)) +\n#   geom_jitter(height = 0.05)+\n#   facet_wrap(~age_gr,\n#              ncol = 5)+\n#   binomial_smooth(formula = y ~ x + I(x^2))+\n#   labs(x = \"Collection date\", y  = \"Seroprevalence\")+\n#   theme_bw()+\n#   theme(axis.text.x = element_text(vjust = 0.5,angle = 45))\n\n##Fig 4 gives information on the seroprevalence of the 15 age groups. The seroprevalence of the age group 1-5 years old increased, which reflect the outbreak's impact in seroprevalence. The outbreak began in June, and 95% of symptomatic cases were aged 0-6 years old; and seroprevalence result also increased in 1-6 years old. However, there is a contrast; our serological shows an increase in the 2-3 years old age group in the 2nd peak (September), while the leading symptomatic group contributing to this peak is children aged 0-2 years old.\n\n\nI combined all samples for four collection times and fitted the GLM model with formula \\(seropositive \\sim age + age^{2}\\) for each age group. Fig 4 show the seroprevalence over time in the same age group.\nFor our assumption, asymptomatic cases of children who went to school infected their siblings. As you can see, the high seroprevalence of children at school age at the beginning of 2023 may cause the infection in their siblings aged 0-6, who have low seroprevalence simultaneously.\n\n\nCode\nggplot(data_pt,\n       aes(x = col_date, y = pos)) +\n  geom_jitter(height = 0.05)+\n  facet_wrap(~age_gr2,\n             ncol = 5)+\n  binomial_smooth(formula = y ~ x + I(x^2))+\n  labs(x = \"Collection date\", y  = \"Seroprevalence\")+\n  theme_bw()+\n  theme(axis.text.x = element_text(vjust = 0.5,angle = 45))\n\n\n\n\n\nFig 4"
  },
  {
    "objectID": "sero_description.html#investigate-location-of-0-3-year-old-serosample",
    "href": "sero_description.html#investigate-location-of-0-3-year-old-serosample",
    "title": "3  Serological data description",
    "section": "3.4 Investigate location of 0-3 year-old serosample",
    "text": "3.4 Investigate location of 0-3 year-old serosample\n\n3.4.1 Total collected samples\n\n\nCode\n# Split by col_time\ndf_part &lt;- data_pt %&gt;% filter(age_gr3 == \"(0,3]\") %&gt;% \n  group_by(col_time,qhchuan) %&gt;% \n  count() %&gt;% as.data.frame() \n\ndf_plot2 &lt;- data.frame()\n\nfor (i in 1:4){\n  df_plot &lt;- df_part %&gt;% filter(col_time == unique(df_part$col_time)[i]) %&gt;% \n    left_join(qhtp, ., by = join_by(varname_2 == qhchuan)) %&gt;% \n    mutate(col_time = unique(df_part$col_time)[i])\n  \n  df_plot2 &lt;- rbind(df_plot2,df_plot)\n}\n\n\ndf_plot2 %&gt;% \n  ggplot() +\n  geom_sf(aes(fill = n),show.legend = T)+\n  scale_fill_continuous(low=\"yellow\", high=\"red\",\n                        guide=\"colorbar\",na.value=\"white\")+\n  geom_sf_text(aes(label = nl_name_2),size=2)+\n  facet_wrap(~factor(col_time,levels = c(\"Dec 2022\",\n                                         \"Apr 2023\",\n                                         \"Aug 2023\",\n                                         \"Dec 2023\")),nrow = 1)+\n  labs(title = \"Number of samples\",fill = \"Total number\")+\n  theme_void()+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n3.4.2 Total collected positive samples\n\n\nCode\ndf_part &lt;- data_pt %&gt;% filter(age_gr3 == \"(0,3]\" & pos == 1) %&gt;% \n  group_by(col_time,qhchuan) %&gt;% \n  count() %&gt;% as.data.frame() \n\ndf_plot2 &lt;- data.frame()\n\nfor (i in 1:4){\n  df_plot &lt;- df_part %&gt;% filter(col_time == unique(df_part$col_time)[i]) %&gt;% \n    left_join(qhtp, ., by = join_by(varname_2 == qhchuan)) %&gt;% \n    mutate(col_time = unique(df_part$col_time)[i])\n  \n  df_plot2 &lt;- rbind(df_plot2,df_plot)\n}\n\n\ndf_plot2 %&gt;% \n  ggplot() +\n  geom_sf(aes(fill = n),show.legend = T)+\n  scale_fill_continuous(low=\"yellow\", high=\"red\",\n                        guide=\"colorbar\",na.value=\"white\")+\n  geom_sf_text(aes(label = nl_name_2),size=2)+\n  facet_wrap(~factor(col_time,levels = c(\"Dec 2022\",\n                                         \"Apr 2023\",\n                                         \"Aug 2023\",\n                                         \"Dec 2023\")),nrow = 1)+\n  labs(title = \"Number of positive samples\",fill = \"Total number\")+\n  theme_void()+\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "fig_manu.html#figure-1-heat-map",
    "href": "fig_manu.html#figure-1-heat-map",
    "title": "4  Manuscript figure",
    "section": "4.1 Figure 1: heat map",
    "text": "4.1 Figure 1: heat map\n\n\nCode\nlibrary(paletteer)\ndf23 &lt;- df1 %&gt;% filter(year(adm_week) == 2023)\n\nco &lt;- data.frame()\n\nfor (i in 0:6){\n  gen &lt;- seq(0,1,le=52) + i\n  co &lt;- rbind(co,gen)\n}\n\n\ndf23 &lt;- df1 %&gt;% filter(year(adm_date) == 2023)\nwwww &lt;- slide_age(time1 = df23$adm_date,\n                  age1 =  df23$age1,\n                  w1 = 7, s1=7)\n\nch &lt;- data.frame(date = wwww$adat$date,\n                 c0 = as.numeric(co[1,]),\n                 c1 = as.numeric(co[2,]),\n                 c2 = as.numeric(co[3,]),\n                 c3 = as.numeric(co[4,]),\n                 c4 = as.numeric(co[5,]),\n                 c5 = as.numeric(co[6,]))\n\nleb_month &lt;- c(\"Jan\",rep(\"\",3),\"Feb\",rep(\"\",3),\"Mar\",rep(\"\",4),\"Apr\",rep(\"\",3),\n               \"May\",rep(\"\",4),\"Jun\",rep(\"\",3),\"Jul\",rep(\"\",3),\"Aug\",rep(\"\",4),\n               \"Sep\",rep(\"\",3),\"Oct\",rep(\"\",3),\"Nov\",rep(\"\",4),\"Dec\",rep(\"\",3))\n\nts &lt;- data.frame(wwww$wdat$date,wwww$wdat$age) %&gt;%\n  filter(!is.na(wwww$wdat$date) & !is.na(wwww$wdat$age)) %&gt;%\n  count(wwww$wdat$date) %&gt;%\n  set_colnames(c(\"time\",\"n\")) %&gt;% \n  mutate(peak = c(rep(\"1st\",36),rep(\"2nd\",nrow(.)-36))) %&gt;% \n  ggplot(aes(x = time, y = n,fill = peak)) +\n  geom_col(alpha = 0.6,color=\"black\") +\n  geom_vline(xintercept = 36.5) +\n  theme_minimal()+\n  scale_y_continuous(name = \"Cases\",\n                     breaks = seq(0,3000,by = 1000),\n                     limit =c(0,3000), \n                     minor_breaks = NULL)+\n  scale_fill_manual(values = c(\"#582C83FF\",\"#FFC72CFF\"))+\n  labs(tag = \"A\")+ \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        legend.position = \"none\",\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.y = element_text(size = 18),\n        axis.text.y = element_text(size = 18))\n\nhm &lt;- ggplot(data=wwww$wdat, aes(x=date, y=age)) +\n      stat_density(\n        aes(fill = after_stat(density)),\n        geom = \"raster\",\n        position = \"identity\"\n      )+\n      scale_fill_paletteer_c(\"grDevices::Inferno\")+\n      # scale_fill_gradient(low=\"#040404FF\", high= \"#FFFE9EFF\")+\n      # scale_fill_distiller(palette = \"Blues\")+\n      theme_minimal()+\n      scale_y_reverse(name = \"Age (years)\",lim= rev(c(0,6)),breaks = seq(0,6))+\n      scale_x_discrete(name = \"Admission week\",labels = leb_month)+\n      labs(tag = \"B\",fill = \"Density\")+\n      # theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size = 8))+\n      geom_line(data = ch,aes(x = date,y = c0),col = \"white\",\n                group = 1,lwd = 0.25,alpha = 0.8)+\n      geom_line(data = ch,aes(x = date,y = c1),col = \"white\",\n                group = 1,lwd = 0.25,alpha = 0.8)+\n      geom_line(data = ch,aes(x = date,y = c2),col = \"white\",\n                group = 1,lwd = 0.25,alpha = 0.8)+\n      geom_line(data = ch,aes(x = date,y = c3),col = \"white\",\n                group = 1,lwd = 0.25,alpha = 0.8)+\n      geom_line(data = ch,aes(x = date,y = c4),col = \"white\",\n                group = 1,lwd = 0.25,alpha = 0.8)+\n      geom_line(data = ch,aes(x = date,y = c5),col = \"white\",\n                group = 1,lwd = 0.25,alpha = 0.8)+\n      theme(axis.title.y = element_text(size = 18),\n            axis.ticks.x = element_blank(),\n            legend.position = \"bottom\",\n            plot.tag = element_text(face = \"bold\", size = 18),\n            axis.title.x = element_text(size = 18),\n            axis.text.x = element_text(size = 18),\n            axis.text.y = element_text(size = 18),\n            legend.text = element_text(size = 15),\n            legend.title = element_text(size = 18))+ \n  guides(fill=guide_colourbar(barwidth=20,label.position=\"bottom\")) \n\nfi_peak &lt;- df1 %&gt;% filter(year(adm_date) == \"2023\") %&gt;%\n  filter((adm_date &lt;= as.Date(\"2023-09-03\")&\n            !is.na(adm_date) & !is.na(age1)))\n\nse_peak &lt;- df1 %&gt;% filter(year(adm_date) == \"2023\") %&gt;%\n  filter((adm_date &gt; as.Date(\"2023-09-03\")) &\n           !is.na(adm_date) & !is.na(age1))\n\ndata &lt;- data.frame(\n  peak = c( rep(\"1st wave\",nrow(data.frame(se_peak$age1))),\n            rep(\"2nd wave\",nrow(data.frame(fi_peak$age1)))),\n  age = c( fi_peak$age1, se_peak$age1 )\n)\n\n## density plot\n\nad &lt;- ggplot(data=data, aes(x=age, group=peak, fill=peak)) +\n      geom_density(alpha = 0.6) +\n      scale_fill_manual(values = c(\"#582C83FF\",\"#FFC72CFF\")) +\n      scale_x_reverse(limit = c(6,0),breaks = seq(0,6,by=1), \n                      minor_breaks = NULL)+\n      scale_y_continuous(minor_breaks = NULL)+\n      coord_flip()+\n      theme_minimal()+\n      labs(x = \"Age\", y =\"Density\",tag = \"C\",fill = \"Outbreak\")+\n      theme(axis.title.y = element_blank(),\n            axis.ticks.x = element_blank(),\n            legend.position = \"bottom\",\n            plot.tag = element_text(face = \"bold\", size = 18),\n            axis.title.x = element_text(size = 18),\n            axis.text.x = element_text(size = 18),\n            axis.text.y = element_text(size = 18),\n            legend.text = element_text(size = 18),\n            legend.title = element_text(size = 18))\n\n\n\n\nCode\n((ts/hm)|(plot_spacer()/ad))+\n  plot_layout(widths = c(2.5,1))\n\n\n\n\n\nCode\nggsave(\"./fig_manuscript/fig1.svg\",\n       width = 15,height = 8,dpi = 500)\n\n\n\n\nCode\ndata %&gt;% \n  tbl_summary(by = peak,\n              digits = list(all_continuous() ~ 3)) %&gt;% \n  add_overall() %&gt;% \n  add_p()\n\n\n\n\n\n\n  \n    \n      Characteristic\n      Overall\nN = 43,3721\n      1st wave\nN = 20,3581\n      2nd wave\nN = 23,0141\n      p-value2\n    \n  \n  \n    age\n2.536 (1.679, 3.723)\n2.649 (1.784, 3.726)\n2.393 (1.548, 3.721)\n&lt;0.001\n  \n  \n  \n    \n      1 Median (Q1, Q3)\n    \n    \n      2 Wilcoxon rank sum test"
  },
  {
    "objectID": "fig_manu.html#figure-2-compare-attack-rate-and-seroprevalence-per-age-group-over-time",
    "href": "fig_manu.html#figure-2-compare-attack-rate-and-seroprevalence-per-age-group-over-time",
    "title": "4  Manuscript figure",
    "section": "4.2 Figure 2: Compare attack rate and seroprevalence per age group over time",
    "text": "4.2 Figure 2: Compare attack rate and seroprevalence per age group over time\n\n\nCode\ndf23$agr &lt;- cut(df23$age1, breaks = c(0, 1, 2, 3, 4,5,6,Inf), right = F)\ndf23$agr &lt;- factor(df23$agr, labels = c(\"[0-1)\", \"[1-2)\", \"[2-3)\",\n                                        \"[3-4)\",\"[4-5)\",\"[5-6)\",\"6+\"))\n\ndf23$age_gr2 &lt;- cut(df23$age1+0.00000001, breaks = c(seq(0, 15, by = 3),82),\n                       labels = c(\"&lt;0 & ≤3 year-old\",\n                                  \"&lt;3 & ≤6 year-old\",\n                                  \"&lt;6 & ≤9 year-old\",\n                                  \"&lt;9 & ≤12 year-old\",\n                                  \"&lt;12 & ≤15 year-old\",\n                                  \"16+ \"))\n\nhcm19 &lt;- census2019 %&gt;% filter(province == \"Thành phố Hồ Chí Minh\")\n\nhcm19$district &lt;- hcm19$district %&gt;%\n  str_remove_all(\"Quận|Huyện\") %&gt;%\n  str_replace_all(\n    c(\"\\\\b2\\\\b|\\\\b9\\\\b\"  = \"Thủ Đức\")) %&gt;%\n  trimws(which = \"both\")\n\n\n\n\nhcm19$age2 &lt;- word(hcm19$age,end = 1) |&gt; as.numeric()\n\nhcm19$age3 &lt;- cut(hcm19$age2,breaks = c(seq(0, 15, by = 3),82),\n                     labels = c(\"&lt;0 & ≤3 year-old\",\n                                \"&lt;3 & ≤6 year-old\",\n                                \"&lt;6 & ≤9 year-old\",\n                                \"&lt;9 & ≤12 year-old\",\n                                \"&lt;12 & ≤15 year-old\",\n                                \"16+\"))\n\npop_agegr &lt;- hcm19 %&gt;%\n  group_by(age3) %&gt;%\n  summarise(n = sum(n))\n\n# atk_plot_df &lt;- df23 %&gt;%\n#   select(adm_week,age_gr2)%&gt;%\n#   count(age_gr2,adm_week) %&gt;%\n#   left_join(pop_agegr,by = join_by(age_gr2 == age3)) %&gt;%\n#   group_by(age_gr2) %&gt;%\n#   mutate(pop = n.y - cumsum(lag(n.x, default = 0)),\n#          atr = n.x/pop)  %&gt;%\n#   select(-n.y)\n# \n# \n# atk_rate &lt;- atk_plot_df %&gt;% na.omit() %&gt;% filter(age_gr2 != \"16+\") %&gt;%\n#   ggplot(aes(x = adm_week,y=log(atr*100000))) +\n#   # geom_bar(stat = \"identity\")+\n#   geom_line()+\n#   facet_wrap(vars(age_gr2),ncol = 5)+\n#   # scale_x_date(limits = as.Date(c(\"2023-01-01\",\"2023-12-31\")))+\n#   coord_cartesian(xlim = as.Date(c(\"2023-01-01\",\"2023-12-31\")),\n#                   ylim = c(-2.5,7.5))+\n#   scale_x_date(date_breaks = \"3 months\",date_labels = \"%b %Y\")+\n#   theme_bw()+\n#   labs(x = \"Admission week\",y= \"Log attack rate\",tag = \"A\")+\n#   theme(axis.text.x = element_blank(),\n#         axis.ticks.x = element_blank())\n\natk_rate &lt;- df23 %&gt;%\n  select(adm_week,age_gr2)%&gt;%\n  count(age_gr2,adm_week) %&gt;%\n  left_join(pop_agegr,by = join_by(age_gr2 == age3)) %&gt;%\n  group_by(age_gr2) %&gt;%\n  mutate(pop = n.y - cumsum(lag(n.x, default = 0)),\n         atr = cumsum(n.x)/pop)  %&gt;%\n  select(-n.y) %&gt;% \n  mutate(\n    attack_rate_ma = slide_dbl(\n      .x      = atr,\n      .f      = mean,         # function to compute\n      .before = 4,            # 4 weeks before = 5-week window total\n      .after  = 0,\n      .step = 1,\n      .complete = TRUE        # only compute for full windows\n    )\n  ) %&gt;%\n  ungroup() %&gt;% na.omit() %&gt;% filter(age_gr2 != \"16+\") %&gt;% \n  ggplot(aes(x = adm_week,y=log10(attack_rate_ma))) +\n  # geom_bar(stat = \"identity\")+\n  geom_line()+\n  facet_wrap(vars(age_gr2),ncol = 5)+\n  scale_x_date(breaks = seq(as.Date(\"2022-12-01\"),as.Date(\"2023-12-31\"), le = 4),\n               date_labels = \"%b %Y\", minor_breaks = NULL)+\n  scale_y_continuous(minor_breaks = NULL)+\n  # scale_x_date(date_breaks = \"4 months\",date_labels = \"%b %Y\")+\n  coord_cartesian(xlim = as.Date(c(\"2022-12-01\",\"2023-12-31\")))+\n  theme_bw()+\n  labs(x = \"Admission week\",y= \"Log 10 cumulative attack rate\",tag = \"A\")+ \n  theme(axis.title.x = element_text(size = 18),\n        axis.text.x = element_blank(),\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.y = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        strip.text.x = element_text(size = 15))\n\n\n## sero_prevalence by age group\n\nsero &lt;- rbind(t1222,t1223,t423,t823)\n\nsero$age_gr2 &lt;- cut(sero$age+0.00000001, breaks = seq(0, 15, by = 3),\n                       labels = c(\"&lt;0 & ≤3 year-old\",\n                                  \"&lt;3 & ≤6 year-old\",\n                                  \"&lt;6 & ≤9 year-old\",\n                                  \"&lt;9 & ≤12 year-old\",\n                                  \"&lt;12 & ≤15 year-old\"))\n\nsero$col_date &lt;- make_date(sero$col_year,sero$col_month,sero$col_day)\n\nsero$age_gr2 &lt;- factor(sero$age_gr2,\n                         levels = c(\"&lt;0 & ≤3 year-old\",\n                                    \"&lt;3 & ≤6 year-old\",\n                                    \"&lt;6 & ≤9 year-old\",\n                                    \"&lt;9 & ≤12 year-old\",\n                                    \"&lt;12 & ≤15 year-old\"))\n\n## observation seroprevalence\nte_sp &lt;- sero %&gt;% \n  group_by(age_gr2,col_time) %&gt;% \n  count(pos) %&gt;% \n  pivot_wider(names_from = pos, values_from = n) %&gt;%\n  ungroup() %&gt;% \n  mutate(tot = `0`+`1`,\n         sp = `1`/(`0`+`1`)) %&gt;% \n  as.data.frame()\n\nfor (i in 1:nrow(te_sp)) {\n  te_sp$lwr[i] &lt;- prop.test(te_sp$`1`[i],te_sp$tot[i],correct=TRUE)$conf.int[1]\n  te_sp$upr[i] &lt;- prop.test(te_sp$`1`[i],te_sp$tot[i],correct=TRUE)$conf.int[2]\n}\n\n\ncol_ddd&lt;- sero %&gt;% \n  group_by(age_gr2,col_time) %&gt;% \n  summarise(mean = mean(col_date)) %&gt;%\n  ungroup()\n\nte_sp$col_date &lt;- col_ddd$mean\n\nsp_agr &lt;- ggplot(sero,\n       aes(x = col_date, y = pos)) +\n  # geom_jitter(height = 0.05)+\n  geom_point(aes(x = col_date, pos),\n             shape = \"|\")+\n  geom_smooth(fill = \"blue\",alpha = 1/10,\n              method = mgcv::gam,formula = y ~ s(x, bs = \"bs\"),\n              method.args = list(method = \"REML\",link = \"logit\",\n                                 family = \"binomial\"))+\n  geom_point(data = te_sp,\n             aes(x  = col_date,y = sp))+\n  geom_errorbar(data = te_sp,\n                aes(x  = col_date,y = sp,ymin = lwr, ymax = upr),alpha = .5)+\n  facet_wrap(~age_gr2,\n             ncol = 5)+\n  labs(x = \"Collection date\", y  = \"Seroprevalence (%)\",tag = \"B\")+\n  scale_x_date(breaks = seq(as.Date(\"2022-12-01\"),as.Date(\"2023-12-31\"), le = 4),\n               date_labels = \"%b %y\", minor_breaks = NULL)+\n  scale_y_continuous(labels = scales::label_percent(), minor_breaks = NULL)+\n  # scale_x_date(date_breaks = \"4 months\",date_labels = \"%b %Y\")+\n  coord_cartesian(ylim = c(0, 1),xlim = as.Date(c(\"2022-12-01\",\"2023-12-31\")))+\n  theme_bw()+\n  theme(axis.title.x = element_text(size = 18),\n        axis.text.x = element_text(size = 12,vjust = 0.5,\n                                   hjust = 0.5,angle = 45),\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.y = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        strip.text.x = element_text(size = 15))\n\n\n\n\nCode\natk_rate/\n  sp_agr\n\n\n\n\n\nCode\nggsave(\"./fig_manuscript/fig3.svg\",\n       width = 12,height = 7,dpi = 500)"
  },
  {
    "objectID": "fig_manu.html#figure-3-seroepidemiology",
    "href": "fig_manu.html#figure-3-seroepidemiology",
    "title": "4  Manuscript figure",
    "section": "4.3 Figure 3: seroepidemiology",
    "text": "4.3 Figure 3: seroepidemiology\n\n4.3.1 GLM\n\n\nCode\npredict2 &lt;- function(x, ci = .95, le = 512, m = 100) {\n  p &lt;- (1 - ci) / 2\n\n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$data\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n\n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n\n  x |&gt;\n    predict(data.frame(age = ages), se.fit = TRUE) |&gt;\n    extract(c(\"fit\", \"se.fit\")) %&gt;%\n    c(age = list(ages), .) |&gt;\n    as_tibble() |&gt;\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n    select(- se.fit)\n}\n\n\n\n\nCode\nm &lt;- 100\neps &lt;- 1\nplot1222 &lt;-  glm(pos ~ age, binomial, data = t1222) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#0808cf\")+\n  ylim(0,101)+\n  theme_classic()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence (%)\",x = \"Age\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2022\"),size = 6)\n\nplot0423 &lt;-  glm(pos ~ age + I(age ^2), binomial, data = t423) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Apr 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed097b\")+\n  ylim(0,101)+\n  theme_classic()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Apr 2023\" = \"#ed097b\"))+\n  labs(y = \"Seroprevalence (%)\",x = \"Age\")+\n  geom_point(data= t423, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed097b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Apr 2023\"),size = 6)\n\nplot0823 &lt;-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t823) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Aug 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed6b00\")+\n  ylim(0,101)+\n  theme_classic()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Aug 2023\" = \"#ed6b00\"))+\n  labs(y = \"Seroprevalence (%)\",x = \"Age\")+\n  geom_point(data= t823, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed6b00\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Aug 2023\"),size = 6)\n\nplot1223 &lt;-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t1223) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#33516b\")+\n  ylim(0,101)+\n  theme_classic()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2023\" = \"#33516b\"))+\n  labs(y = \"Seroprevalence (%)\",x = \"Age\")+\n  geom_point(data= t1223, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#33516b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2023\"),size = 6)\n\n\n\n\nCode\ndf_plot &lt;- df1 %&gt;% filter(year(adm_week) == \"2023\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;%\n  count(adm_week) %&gt;% as.data.frame()\n\natdf &lt;- rbind(t1222,t423,t823,t1223) %&gt;%\n  mutate(col_date = make_date(year = col_year,\n                              month = col_month,\n                              day = col_day))\n\nts2 &lt;- ggplot()+\n  geom_bar(data = df_plot, aes(x = as.Date(adm_week), y = n),stat = \"identity\",\n           alpha = 0.5) +\n  geom_point(aes(x = as.Date(col_date), y =  pos*3000),\n            shape = \"|\",data = atdf)+\n  labs(x = \"Admission week\",y = \"Cases\",tag = \"B\")+\n  annotate(\"rect\", fill = \"blue\",\n           xmin = as.Date(c(\"2022-12-01\",\"2023-04-01\",\"2023-08-01\",\"2023-12-01\")), \n           xmax = as.Date(c(\"2022-12-31\",\"2023-04-30\",\"2023-08-30\",\"2023-12-30\")), \n           ymin = 0, ymax = Inf, alpha = .2)+\n  theme_classic()+\n  scale_y_continuous(breaks = seq(0,3000,by = 1000),\n                     limit =c(0-1,3000+1))+\n  scale_x_date(\n    breaks = as.Date(c(\"2022-12-15\", \"2023-04-15\", \"2023-08-15\", \"2023-12-15\")),\n    labels = c(\"Dec 2022\", \"Apr 2023\", \"Aug 2023\", \"Dec 2023\"),\n    limits = c(as.Date(\"2022-11-24\"),as.Date(\"2024-01-01\")))+\n  theme(\n    axis.text.x = element_text(size = 18),\n    axis.text.y = element_text(size = 18),\n    legend.text = element_text(size = 18),\n    plot.tag = element_text(face = \"bold\", size = 18),\n    axis.title.x = element_text(size = 18),\n    axis.title.y = element_text(size = 18))\n\n\n\n\nCode\nglmfit &lt;- (plot1222 | plot0423 | plot0823 | plot1223) \n\n\nfig3 &lt;- glmfit/\n  ts2\n\nfig3+ \n  plot_annotation(tag_levels = c('A'))\n\n\n\n\n\nCode\n# ggsave(\"./fig_manuscript/fig2.svg\",\n#        width = 15,height = 7,dpi = 500)\n\n\n\n\n4.3.2 GAM\nCompare GAM fitting manually and geom_smooth\n\n\nCode\npredictg &lt;- function(x, ci = .95, le = 512, m = 100) {\n  p &lt;- (1 - ci) / 2\n  \n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$model\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n  \n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n  \n  x |&gt;\n    predict(data.frame(age = ages), se.fit = TRUE) |&gt;\n    extract(c(\"fit\", \"se.fit\")) %&gt;%\n    c(age = list(ages), .) |&gt;\n    as_tibble() |&gt;\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n    select(- se.fit)\n}\n\ndf.list &lt;- list(t1222,t423,t823,t1223)\n\n## fit manually\n\nfig2m &lt;- lapply(df.list, function(x) \n            gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n                family = \"binomial\",data = x) |&gt;\n            predictg() %&gt;% as.data.frame() \n            ) %&gt;%\n  bind_rows(.id = \"label\") %&gt;% \n  mutate(col_date = case_when(\n    label == 1 ~ \"Dec 2022\",\n    label == 2 ~ \"Apr 2023\",\n    label == 3 ~ \"Aug 2023\",\n    label == 4 ~ \"Dec 2023\"\n  )) %&gt;% \n  ggplot(aes(x = age,y = fit, \n             fill = factor(col_date,levels = c(\"Dec 2022\",\"Apr 2023\",\n                                               \"Aug 2023\",\"Dec 2023\"))))+\n  geom_line()+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5)+\n  scale_fill_paletteer_d(\"nbapalettes::thunder\")+\n  ylim(0,101)+\n  labs(y = \"Seroprevalence (%)\",x = \"Age\",tag = \"Manually\")+\n  scale_x_continuous(breaks = seq(0,15,by = 3))+\n  theme_bw()+\n  facet_wrap(~factor(col_date,levels = c(\"Dec 2022\",\"Apr 2023\",\n                                         \"Aug 2023\",\"Dec 2023\")),\n              ncol = 4)+ \n  theme(axis.title.x = element_text(size = 18),\n        axis.text.x = element_text(size = 18),\n        legend.position = \"none\",\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.y = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        strip.text.x = element_text(size = 18))\n\n## geom_smooth\n\nfig2a &lt;- df.list %&gt;% bind_rows(.id = \"label\") %&gt;% \n        ggplot(aes(x = age, y = pos)) +\n          # geom_jitter(height = 0.05)+\n          geom_point(aes(x = age, pos),\n                     shape = \"|\")+\n          facet_wrap(~factor(col_time,levels = c(\"Dec 2022\",\"Apr 2023\",\n                                                 \"Aug 2023\",\"Dec 2023\")),\n                     ncol = 4)+\n          geom_smooth(fill = \"blue\",alpha = 1/10,\n                      method = mgcv::gam,formula = y ~ s(x, bs = \"bs\"),\n                      method.args = list(method = \"REML\",link = \"logit\",\n                                         family = \"binomial\"))+\n          labs(y = \"Seroprevalence (%)\",x = \"Age\",tag = \"A\")+\n          scale_x_continuous(breaks = seq(0,15,by = 3), minor_breaks = NULL)+\n          scale_y_continuous(labels = scales::label_percent(), minor_breaks = NULL)+\n          coord_cartesian(ylim = c(0, 1))+\n          theme_bw()+ \n          theme(axis.title.x = element_text(size = 18),\n                axis.text.x = element_text(size = 18),\n                legend.position = \"none\",\n                plot.tag = element_text(face = \"bold\", size = 18),\n                axis.title.y = element_text(size = 18),\n                axis.text.y = element_text(size = 18),\n                strip.text.x = element_text(size = 18))\n\n\n\n\nCode\nfig2m/\n  fig2a\n\n\n\n\n\n\n\nCode\nfig2a/\n  ts2\n\n\n\n\n\nCode\nggsave(\"./fig_manuscript/fig2.svg\",\n       width = 13,height = 8,dpi = 500)"
  },
  {
    "objectID": "fig_manu.html#temporary-linked-age-profile",
    "href": "fig_manu.html#temporary-linked-age-profile",
    "title": "4  Manuscript figure",
    "section": "4.4 Temporary linked age profile",
    "text": "4.4 Temporary linked age profile\n\n\nCode\n## function to calculate age profile\nage_profile &lt;- function(data, age_values = seq(0, 15, le = 512), ci = .95) {\n  model &lt;- gam(pos ~ s(age), binomial, data)\n  link_inv &lt;- family(model)$linkinv\n  df &lt;- nrow(data) - length(coef(model))\n  p &lt;- (1 - ci) / 2\n  model |&gt; \n    predict(list(age = age_values), se.fit = TRUE) %&gt;%\n    c(list(age = age_values), .) |&gt; \n    as_tibble() |&gt; \n    mutate(lwr = link_inv(fit + qt(    p, df) * se.fit),\n           upr = link_inv(fit + qt(1 - p, df) * se.fit),\n           fit = link_inv(fit)) |&gt; \n    select(- se.fit)\n}\n\npredict2 &lt;- function(...) predict(..., type = \"response\") |&gt; as.vector()\n\natdf &lt;- rbind(t1222,t423,t823,t1223) %&gt;%\n  mutate(col_date = make_date(year = col_year,\n                              month = col_month,\n                              day = col_day))\n\nhfmd &lt;- atdf %&gt;% \nas_tibble() |&gt; \n  mutate(collection = id |&gt;\n           str_remove(\".*-\") |&gt; \n           as.numeric() |&gt; \n           divide_by(1e4) |&gt; \n           round(),\n         col_date2 = as.numeric(col_date),\n         across(pos, ~ .x &gt; 0))\n\nage_profile_constrained &lt;- function(data = hfmd, age_values = seq(0, 15, le = 512), \n                                    ci = .95,n = 100) {\n  mean_collection_times &lt;- data |&gt; \n    group_by(collection) |&gt; \n    summarise(mean_col_date = mean(col_date2)) |&gt; \n    with(setNames(mean_col_date, collection))\n  \n  data |&gt; \n# Step 1:\n    group_by(collection) |&gt; \n    group_modify(~ .x |&gt;\n                   age_profile(age_values, ci) |&gt; \n                   mutate(across(c(fit, lwr, upr), ~ map(.x, ~ rbinom(n, 1, .x))))) |&gt; \n    ungroup() |&gt; \n    mutate(collection_time = mean_collection_times[as.character(collection)]) |&gt; \n    unnest(c(fit, lwr, upr)) |&gt;\n    pivot_longer(c(fit, lwr, upr), names_to = \"line\", values_to = \"seropositvty\") |&gt; \n# Step 2a:\n    group_by(age, line) |&gt; \n    group_modify(~ .x %&gt;%\n                   scam(seropositvty ~ s(collection_time, bs = \"mpi\"), binomial, .) |&gt; \n                   predict2(list(collection_time = mean_collection_times)) %&gt;%\n                   tibble(collection_time = mean_collection_times,\n                          seroprevalence  = .)) |&gt; \n    ungroup() |&gt; \n# Step 2b:\n    group_by(collection_time, line) |&gt; \n    group_modify(~ .x |&gt;\n                   mutate(across(seroprevalence, ~ gam(.x ~ s(age), betar) |&gt; \n                                                   predict2()))) |&gt; \n    ungroup() |&gt; \n    pivot_wider(names_from = line, values_from = seroprevalence) |&gt; \n    group_by(collection_time) |&gt; \n    group_split()\n}\n\nconstrained_age_profiles &lt;- age_profile_constrained(hfmd)\n\n\n\n\nCode\nmean_collection_times &lt;- hfmd |&gt; \n  group_by(collection) |&gt; \n  summarise(mean_col_date = mean(col_date2)) |&gt; \n  with(setNames(mean_col_date, collection))\n\natdf &lt;- atdf %&gt;% \n  as_tibble() |&gt; \n  mutate(collection = id |&gt;\n           str_remove(\".*-\") |&gt; \n           as.numeric() |&gt; \n           divide_by(1e4) |&gt; \n           round()) |&gt; \n  mutate(collection_time = mean_collection_times[as.character(collection)])\n\nconstrained_gam &lt;- constrained_age_profiles %&gt;% \n  bind_rows() %&gt;%  \n  ggplot(aes(x = age, y = fit)) +\n  geom_line(aes(x = age, fit))+\n  geom_point(data = atdf,aes(x = age, y = pos),shape = \"|\")+\n  facet_wrap(~factor(collection_time,\n                     labels = c(\"Dec 2022\",\"Apr 2023\",\"Aug 2023\",\"Dec 2023\")),\n             ncol = 4)+\n  geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"blue\", alpha = 0.3) +\n  labs(y = \"Seroprevalence (%)\",x = \"Age (years)\")+\n  scale_y_continuous(labels = scales::label_percent(scale = 100),limits = c(0,1))+\n  # coord_cartesian(ylim = c(0, 1))+\n  theme_bw()+ \n  theme(axis.title.x = element_text(size = 18),\n        axis.text.x = element_text(size = 18),\n        legend.position = \"none\",\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.y = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        strip.text.x = element_text(size = 18))\n\n\n\n\nCode\nconstrained_gam/\n  ts2\n\n\n\n\n\nCode\nggsave(\"./fig_manuscript/glm_pava.svg\",\n       width = 15,height = 8,dpi = 500)"
  },
  {
    "objectID": "fig_manu.html#supplementary-plot",
    "href": "fig_manu.html#supplementary-plot",
    "title": "4  Manuscript figure",
    "section": "4.5 Supplementary plot",
    "text": "4.5 Supplementary plot\n\n4.5.1 Attack rate\n\n\nCode\npop &lt;- readRDS(\"D:/OUCRU/hfmd/data/count_dangky.rds\")\npop_a &lt;- pop %&gt;% group_by(birth_month, birth_year) %&gt;%\n  summarise(n=sum(n)) %&gt;% arrange(birth_year)\n\ncolnames(pop_a) &lt;- c(\"m\",\"y\",\"n\")\n\npop_a$dob &lt;- str_c(pop_a$y,pop_a$m,sep = \"-\") %&gt;% ym()\n\ntime1 = df1$adm_date\nage1 =  df1$age1\ndob = pop_a$dob\nn = pop_a$n\n\ndft &lt;- data.frame(time1,age1) %&gt;%\n  filter(!is.na(time1) & !is.na(age1)) %&gt;%\n  arrange(time1)\n\n\ndft$agr=as.factor(cut(dft$age1, c(0,0.5,\n                                  1,1.5,\n                                  2,2.5,\n                                  3,3.5,\n                                  4,4.5,5,5.5,6,100), right=TRUE ))\nlevels (dft$agr) = c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                     \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                     \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                     \"4.5-5\",\"5-5.5\",\"5.5-6\",\"6+\")\n\nsus_pop &lt;- data.frame(dob = dob, n = n)\n\nout_total &lt;- data.frame()\n\nhfmd23 &lt;- df1 %&gt;% filter(year(adm_week) == \"2023\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;%\n  count(adm_week)\n\nhfmd23$week &lt;- 1:length(hfmd23$adm_week)\nhfmd23$week &lt;- ifelse(hfmd23$week == 53,52,hfmd23$week)\n\nhfmd23$n2 &lt;- ifelse(hfmd23$week == 52, sum(hfmd23$n[hfmd23$week==52]), hfmd23$n)\n\nhfmd23 &lt;- hfmd23[-53,]\n\ndateaa &lt;- hfmd23$adm_week+3\n\nsus_pop &lt;- data.frame(dob = dob, n = n)\n\nfor (i in 1:52){\n  sus_pop$age &lt;- interval(sus_pop$dob, dateaa[i]) / years(1)\n  \n  sus_pop$agr=as.factor(cut(sus_pop$age, c(0,0.5,\n                                           1,1.5,\n                                           2,2.5,\n                                           3,3.5,\n                                           4,4.5,5,5.5,6,100), right=TRUE ))\n  levels (sus_pop$agr) = c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                           \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                           \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                           \"4.5-5\",\"5-5.5\",\"5.5-6\",\"6+\")\n  outcum &lt;- sus_pop %&gt;% group_by(agr) %&gt;%\n    summarise(n = sum(n)) %&gt;%\n    as.data.frame()\n  outcum$date &lt;- rep(dateaa[i],nrow(outcum))\n  out_total &lt;- rbind(out_total,outcum)\n}\n\ndeno &lt;- out_total %&gt;%\n  pivot_wider(names_from = agr, values_from = n) %&gt;% as.data.frame()\n\ncasss &lt;- wwww$wdat\n\ncasss$agr=as.factor(cut(casss$age, c(0,0.5,1,1.5,2,2.5,\n                                     3,3.5,4,4.5,5,5.5,6,100), right=TRUE ))\nlevels (casss$agr) = c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                       \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                       \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                       \"4.5-5\",\"5-5.5\",\"5.5-6\",\"6+\")\n\ncasss &lt;- casss %&gt;% group_by(date,agr) %&gt;%\n  count() %&gt;% pivot_wider(names_from = agr, values_from = n) %&gt;% as.data.frame()\n\n\ncasss &lt;- casss[,-ncol(casss)]\ncasss &lt;- replace(casss,is.na(casss), 0)\ncasss &lt;- casss[,c(1:10,13,11,14,12)]\n\natkr &lt;- data.frame()\natkr &lt;- rbind(atkr,as.numeric(casss[1,-1])/as.numeric(deno[1,-1]))\nfor (i in 1:51){\n  new &lt;- as.numeric(casss[i+1,-1])/(as.numeric(deno[i+1,-1]) - as.numeric(casss[i,-1]))\n  atkr &lt;- rbind(atkr,new)\n}\natkr &lt;- cbind(deno$date,atkr)\n\ncolnames(atkr) &lt;- colnames(deno)\natkr &lt;- replace(atkr,is.na(atkr), 0)\n\n\n\natk_plot &lt;- atkr %&gt;% pivot_longer(cols=colnames(atkr)[-1],\n                                  names_to= 'agr',\n                                  values_to='atk') %&gt;% as.data.frame()\n\natk &lt;- ggplot(atk_plot, aes(x=as.character(date), y=agr, fill = atk)) +\n  geom_raster()+\n  scale_fill_paletteer_c(\"grDevices::Inferno\",\n                         breaks = c(0.01, 0.02, 0.03, 0.04, 0.05))+\n  scale_y_discrete(limits=rev)+\n  scale_x_discrete(name = \"Admission week\",labels = leb_month)+\n  theme_minimal()+\n  labs(tag = \"B\",fill = \"Attack rate\",y = \"Age group (years)\")+\n  theme(axis.title.y = element_text(size = 18),\n        axis.ticks.x = element_blank(),\n        legend.position = \"bottom\",\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.x = element_text(size = 18),\n        axis.text.x = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        legend.text = element_text(size = 15),\n        legend.title = element_text(size = 18))+ \n  guides(fill=guide_colourbar(barwidth=20,label.position=\"bottom\")) \n\n\n\n\nCode\nts/\n  atk\n\n\n\n\n\nCode\nggsave(\"./fig_manuscript/sup1.svg\",\n       width = 15,height = 8,dpi = 500)"
  },
  {
    "objectID": "fig_manu.html#figure-4-calibration-plot",
    "href": "fig_manu.html#figure-4-calibration-plot",
    "title": "4  Manuscript figure",
    "section": "4.6 Figure 4: Calibration plot",
    "text": "4.6 Figure 4: Calibration plot\n\n\nCode\n# correct_lv &lt;- c(\"0≤ & &lt;1\",\"1≤ & &lt;2\",\"2≤ & &lt;3\",\"3≤ & &lt;4\",\"4≤ & &lt;5\",\n#                 \"5≤ & &lt;6\",\"6≤ & &lt;7\",\"7≤ & &lt;8\",\"8≤ & &lt;9\",\"9≤ & &lt;10\",\n#                 \"10≤ & &lt;11\",\"11≤ & &lt;12\",\"12≤ & &lt;13\",\"13≤ & &lt;14\",\"14≤ & &lt;15\")\n# \n# cali_sero &lt;- sero %&gt;% group_by(age_gr) %&gt;%\n#             count(pos) %&gt;%\n#             pivot_wider(names_from = pos,values_from = n) %&gt;%\n#             clean_names() %&gt;%\n#             mutate(sp = x1/sum(x0,x1)) %&gt;%\n#             select(-c(x0,x1)) %&gt;%\n#             ungroup()\n# \n# cali_sero$age_gr &lt;- factor(cali_sero$age_gr,levels = correct_lv)\n# \n# ## case noti\n# df23$age_cali &lt;- cut(df23$age1+0.00000001, breaks = c(seq(0, 15, by = 1),82),\n#                     labels = c(correct_lv,\n#                                \"16+\"))\n# \n# ## population\n# hcm19$age_cali &lt;- cut(hcm19$age2,breaks = c(seq(0, 15, by = 1),82),\n#                       labels = c(correct_lv,\n#                                  \"16+\"))\n# \n# pop_agegr_cali &lt;- hcm19 %&gt;%\n#                   group_by(age_cali) %&gt;%\n#                   summarise(n = sum(n))\n# \n# cali_plot_df &lt;- df23 %&gt;%\n#                 select(age_cali) %&gt;%\n#                 group_by(age_cali) %&gt;%\n#                 count() %&gt;% na.omit() %&gt;%\n#                 left_join(pop_agegr_cali,by = join_by(age_cali == age_cali)) %&gt;%\n#                 # group_by(age_gr2) %&gt;%\n#                 mutate(atr = n.x/n.y) %&gt;%\n#                 filter(age_cali != \"16+\")  %&gt;%\n#                 left_join(cali_sero,by = join_by(age_cali == age_gr))\n# \n# model_clb &lt;- glm(atr*100000 ~ sp,data = cali_plot_df)\n# \n# model_clb$pred &lt;- predict.glm(model_clb, type = 'response')\n\n\n\n\nCode\n# calibration_plot(data = data.frame(y = model_clb$y,pred = model_clb$pred),\n#                  obs = \"y\", pred = \"pred\")"
  },
  {
    "objectID": "sero.html",
    "href": "sero.html",
    "title": "2  HFMD Seroprevalence",
    "section": "",
    "text": "3 Import data\nCode\npredict2 &lt;- function(x, ci = .95, le = 512, m = 100) {\n  p &lt;- (1 - ci) / 2\n\n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$data\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n\n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n\n  x |&gt;\n    predict(data.frame(age = ages), se.fit = TRUE) |&gt;\n    extract(c(\"fit\", \"se.fit\")) %&gt;%\n    c(age = list(ages), .) |&gt;\n    as_tibble() |&gt;\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n    select(- se.fit)\n}\nCode\nlibrary(plotly)\nlibrary(scam)\nCode\natdf &lt;- rbind(t1222,t423,t823,t1223) %&gt;%\n  mutate(col_date = make_date(year = col_year,\n                              month = col_month,\n                              day = col_day))\nCode\nhead(atdf)\n\n\n               id  age_gr        age col_day col_month col_year neutralization\n1 20FL-001-060001 0≤ & &lt;1 0.36986301      28        12     2022           &lt;NA&gt;\n2 20FL-001-060002 0≤ & &lt;1 0.33150685      27        12     2022           &lt;NA&gt;\n3 20FL-001-060003 0≤ & &lt;1 0.07671233       4         1     2023           &lt;NA&gt;\n4 20FL-001-060004 0≤ & &lt;1 0.43835616      27        12     2022           &lt;NA&gt;\n5 20FL-001-060005 0≤ & &lt;1 0.93150685       3         1     2023           &lt;NA&gt;\n6 20FL-001-060006 1≤ & &lt;2 1.95616438      26        12     2022           1:16\n  pos col_time   col_date\n1   0 Dec 2022 2022-12-28\n2   0 Dec 2022 2022-12-27\n3   0 Dec 2022 2023-01-04\n4   0 Dec 2022 2022-12-27\n5   0 Dec 2022 2023-01-03\n6   1 Dec 2022 2022-12-26\nCode\n# cleaned &lt;- read_csv(\"D:/OUCRU/HCDC/project phân tích sero quận huyện/cleaned.csv\")\n# \n# sero &lt;- rbind(t1222,t1223,t423,t823)\n# \n# sero_add &lt;- full_join(cleaned,sero, by =  c(\"id\" = \"id\"))\n# \n# data_pt &lt;- sero_add %&gt;% filter(!is.na(age)&!is.na(qhchuan)) %&gt;% \n#   select(qhchuan,age,col_month,col_year,pos) %&gt;% \n#   as.data.frame()\n# \n# # HCMC map\n# map_path &lt;- \"D:/OUCRU/HCDC/project phân tích sero quận huyện/\"\n# vn_qh &lt;- st_read(dsn = file.path(map_path, \"gadm41_VNM.gpkg\"), layer = \"ADM_ADM_2\")\n# \n# vn_qh1 &lt;- vn_qh %&gt;%\n#   clean_names() %&gt;%     ## cho thành chữ thường\n#   filter(\n#     str_detect(\n#       name_1,\n#       \"Hồ Chí Minh\"\n#     )\n#   )\n# qhtp &lt;- vn_qh1[-c(14,21),]\n# \n# qhtp$geom[qhtp$varname_2 == \"Thu Duc\"] &lt;- vn_qh1[c(\"21\",\"24\",\"14\"),] %&gt;%\n#   st_union()\n# \n# qhtp &lt;- qhtp %&gt;% st_cast(\"MULTIPOLYGON\")\n# library(stringi)\n# qhtp$varname_2 &lt;- stri_trans_general(qhtp$varname_2, \"latin-ascii\") %&gt;%\n#   tolower() %&gt;%\n#   str_remove(\"district\") %&gt;%\n#   trimws(which = \"both\")\n# \n# qhtp$nl_name_2 &lt;- c(\"BC\",\"BTân\",\"BT\",\"CG\",\"CC\",\"GV\",\n#                     \"HM\",\"NB\",\"PN\",\"1\",\"10\",\"11\",\"12\",\n#                     \"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"TB\",\n#                     \"TP\",\"TĐ\")\nCode\n# ## function\n# get_sp &lt;- function(month,year){\n#   data_pt %&gt;% filter(col_month == month & col_year == year) %&gt;% \n#     select(-age) %&gt;% group_by(qhchuan) %&gt;% count()  %&gt;% \n#     as.data.frame() %&gt;%\n#     dplyr::mutate(pre = n / sum(n))  \n# }\n# \n# plot_cover &lt;- function(data,map){\n#   output &lt;- left_join(map, data.frame(data), by = join_by(varname_2 == qhchuan))\n#   output %&gt;% ggplot() +\n#     geom_sf(aes(fill = pre),show.legend = T)+\n#     # scale_fill_continuous(low=\"yellow\", high=\"red\",\n#     #                       guide=\"colorbar\",na.value=\"white\",\n#     #                       name = \"Percentage\",\n#     #                       limits = c(0,20))+\n#     # geom_sf_text(aes(label = nl_name_2),size=2.5)+\n#     scale_fill_gsea(na.value = \"white\",\n#                     breaks = seq(0,0.2,by = 0.05),\n#                     limits = c(0, 0.2),\n#                     name = \"Percentage\",\n#                     labels = scales::label_percent())+\n#     theme_void()  \n# }\nCode\n# sp1222 &lt;- get_sp(12,2022)\n# sp0423 &lt;- get_sp(4,2023)\n# sp0823 &lt;- get_sp(8,2023)\n# sp1223 &lt;- get_sp(12,2023)\n# \n# p1222 &lt;- plot_cover(data = sp1222,map = qhtp)\n# p423 &lt;- plot_cover(data = sp0423,map = qhtp)\n# p823 &lt;- plot_cover(data = sp0823,map = qhtp)\n# p1223 &lt;- plot_cover(data = sp1223,map = qhtp)\n# \n# serum_dis &lt;- plot_grid(p1222,p423,p823,p1223,\n#           # labels = c(\"Dec 2022\",\"Apr 2023\",\"Aug 2023\",\"Dec 2023\"),\n#           ncol = 4)\nCode\n### data\natdf &lt;- rbind(t1222,t423,t823,t1223) %&gt;%\n  mutate(col_date = make_date(year = col_year,\n                              month = col_month,\n                              day = col_day))\n\nhfmd &lt;- atdf %&gt;% \nas_tibble() |&gt; \n  mutate(collection = id |&gt;\n           str_remove(\".*-\") |&gt; \n           as.numeric() |&gt; \n           divide_by(1e4) |&gt; \n           round(),\n         col_date2 = as.numeric(col_date),\n         across(pos, ~ .x &gt; 0))\n\nhfmd \n\n\n# A tibble: 300 × 12\n   id     age_gr    age col_day col_month col_year neutralization pos   col_time\n   &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;          &lt;lgl&gt; &lt;chr&gt;   \n 1 20FL-… 0≤ & … 0.370  28      12        2022     &lt;NA&gt;           FALSE Dec 2022\n 2 20FL-… 0≤ & … 0.332  27      12        2022     &lt;NA&gt;           FALSE Dec 2022\n 3 20FL-… 0≤ & … 0.0767 4       1         2023     &lt;NA&gt;           FALSE Dec 2022\n 4 20FL-… 0≤ & … 0.438  27      12        2022     &lt;NA&gt;           FALSE Dec 2022\n 5 20FL-… 0≤ & … 0.932  3       1         2023     &lt;NA&gt;           FALSE Dec 2022\n 6 20FL-… 1≤ & … 1.96   26      12        2022     1:16           TRUE  Dec 2022\n 7 20FL-… 1≤ & … 1.40   26      12        2022     &lt;NA&gt;           FALSE Dec 2022\n 8 20FL-… 1≤ & … 1.07   27      12        2022     &lt;NA&gt;           FALSE Dec 2022\n 9 20FL-… 1≤ & … 1.71   6       12        2022     &lt;NA&gt;           FALSE Dec 2022\n10 20FL-… 1≤ & … 1.92   27      12        2022     &lt;NA&gt;           FALSE Dec 2022\n# ℹ 290 more rows\n# ℹ 3 more variables: col_date &lt;date&gt;, collection &lt;dbl&gt;, col_date2 &lt;dbl&gt;"
  },
  {
    "objectID": "sero.html#serology-data",
    "href": "sero.html#serology-data",
    "title": "2  HFMD Seroprevalence",
    "section": "3.1 Serology data",
    "text": "3.1 Serology data\n\n\nCode\napr_2023 &lt;- read_excel(\"D:/OUCRU/hfmd/data/4_2023.xlsx\")\naug_2023 &lt;- read_excel(\"D:/OUCRU/hfmd/data/08_2023.xlsx\")\ndec_2022 &lt;- read_excel(\"D:/OUCRU/hfmd/data/12_2022.xls\")\ndec_2023 &lt;- read_excel(\"D:/OUCRU/hfmd/data/12_2023.xlsx\")\n\nt423 &lt;- data.frame(apr_2023[-c(1,2),c(6,8,10:14)])\nt423$pos &lt;- replace(t423$...14,is.na(t423$...14),0) %&gt;%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t423) &lt;- c(\"id\",\"age_gr\",\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt423$age &lt;- as.numeric(t423$age)\nt423$col_time &lt;- rep(\"Apr 2023\",nrow(t423))\n\n\nt823 &lt;- data.frame(aug_2023[-c(1,2),c(6,8,9,14:17)])\nt823$pos &lt;- str_detect(t823$...17,regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t823) &lt;- c(\"id\",\"age_gr\",\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt823$age &lt;- as.numeric(t823$age)\nt823$col_time &lt;- rep(\"Aug 2023\",nrow(t823))\n\nt1222 &lt;- data.frame(dec_2022[-c(1,2),c(6,8,10:14)])\nt1222$pos &lt;- replace(t1222$...14,is.na(t1222$...14),0) %&gt;%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t1222) &lt;- c(\"id\",\"age_gr\",\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt1222$age &lt;- as.numeric(t1222$age)\nt1222$col_time &lt;- rep(\"Dec 2022\",nrow(t1222))\n\n\nt1223 &lt;- data.frame(dec_2023[-c(1,2),c(6,8,9,14:17)])\nt1223$pos &lt;- replace(t1223$...17,is.na(t1223$...17),0) %&gt;%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t1223) &lt;- c(\"id\",\"age_gr\",\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt1223$age &lt;- as.numeric(t1223$age)\nt1223$col_time &lt;- rep(\"Dec 2023\",nrow(t1223))"
  },
  {
    "objectID": "sero.html#case",
    "href": "sero.html#case",
    "title": "2  HFMD Seroprevalence",
    "section": "3.2 Case",
    "text": "3.2 Case\n\n\nCode\ndf1 &lt;- read_excel(\"D:/OUCRU/hfmd/data/TCM_full.xlsx\", \n                  col_types = c(\"date\", \"numeric\", \"text\", \n                                \"text\", \"text\", \"date\", \"date\", \"date\", \n                                \"text\", \"text\", \"text\"))\ncolnames(df1) &lt;- c(\"dob\", \"age\", \"gender\", \"commune\", \"district\",\n                   \"reported_date\", \"onset_date\",\"adm_date\",\n                   \"medi_cen\",\"inout\",\"severity\")\ndf1$dob &lt;- df1$dob %&gt;% as_date()\ndf1$adm_date &lt;- df1$adm_date %&gt;% as_date()\n\ndf1$age1 &lt;- interval(df1$dob, df1$adm_date) / years(1)\ndf1$adm_week &lt;- as.Date(floor_date(df1$adm_date, \"week\"))\ndf1$district &lt;- df1$district %&gt;% str_replace_all(\n  c( \"Quận Gò vấp\"  = \"Quận Gò Vấp\"))\ndf1$district &lt;- df1$district %&gt;% \n  str_remove(\"Quận|Huyện|Thành phố\") %&gt;%\n  trimws(which = \"both\") \n\ndf_plot &lt;- df1 %&gt;% filter(year(adm_week) == \"2023\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;%\n  count(adm_week) %&gt;% as.data.frame()\n\nts &lt;- ggplot()+\n  geom_bar(data = df_plot, aes(x = as.Date(adm_week), y = n),stat = \"identity\",\n           alpha = 0.5) +\n  labs(x = \"Admission week\",\"Cases\")+\n  geom_vline(xintercept = as.Date(\"2022-12-01\"),\n             alpha = 0.4,col = \"#0808cf\")+\n  geom_vline(xintercept = as.Date(\"2022-12-30\"),\n             alpha = 0.4,col = \"#0808cf\")+\n  geom_vline(xintercept = as.Date(\"2023-04-01\"),\n             alpha = 0.4,col = \"#ed097b\")+\n  geom_vline(xintercept = as.Date(\"2023-04-30\"),\n             alpha = 0.4,col = \"#ed097b\")+\n  geom_vline(xintercept = as.Date(\"2023-08-01\"),\n             alpha = 0.4,col = \"#ed6b00\")+\n  geom_vline(xintercept = as.Date(\"2023-08-30\"),\n             alpha = 0.4,col = \"#ed6b00\")+\n  geom_vline(xintercept = as.Date(\"2023-12-01\"),\n             alpha = 0.4,col = \"#33516b\")+\n  geom_vline(xintercept = as.Date(\"2023-12-30\"),\n             alpha = 0.4,col = \"#33516b\")+\n  xlim(as.Date(\"2022-11-24\"),as.Date(\"2024-01-01\"))+theme_classic()"
  },
  {
    "objectID": "sero.html#fit-by-glm",
    "href": "sero.html#fit-by-glm",
    "title": "2  HFMD Seroprevalence",
    "section": "5.1 Fit by GLM",
    "text": "5.1 Fit by GLM\n\n\nCode\nm &lt;- 100\neps &lt;- 1\n\nplot1222 &lt;-  glm(pos ~ age, binomial, data = t1222) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5)+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence(%)\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",size = 3,\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.title= element_blank(),\n    legend.position = \"inside\",\n    legend.position.inside =  c(0.15,0.80),\n    legend.text = element_text(size = 15))\n\n\n\n\nCode\nplot1222 &lt;-  glm(pos ~ age, binomial, data = t1222) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#0808cf\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2022\"),size = 6)\n\nplot0423 &lt;-  glm(pos ~ age + I(age ^2), binomial, data = t423) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Apr 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed097b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Apr 2023\" = \"#ed097b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t423, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed097b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Apr 2023\"),size = 6)\n\nplot0823 &lt;-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t823) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Aug 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed6b00\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Aug 2023\" = \"#ed6b00\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t823, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed6b00\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Aug 2023\"),size = 6)\n\nplot1223 &lt;-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t1223) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#33516b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2023\" = \"#33516b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t1223, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#33516b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2023\"),size = 6)\n\n\n\n\nCode\nplot1222 + plot0423 + plot0823 + plot1223"
  },
  {
    "objectID": "sero.html#fit-by-gam",
    "href": "sero.html#fit-by-gam",
    "title": "2  HFMD Seroprevalence",
    "section": "5.2 Fit by GAM",
    "text": "5.2 Fit by GAM\n\n\nCode\n## \npredictg &lt;- function(x, ci = .95, le = 512, m = 100) {\n  p &lt;- (1 - ci) / 2\n  \n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$model\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n  \n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n  \n  x |&gt;\n    predict(data.frame(age = ages), se.fit = TRUE) |&gt;\n    extract(c(\"fit\", \"se.fit\")) %&gt;%\n    c(age = list(ages), .) |&gt;\n    as_tibble() |&gt;\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n    select(- se.fit)\n}\n\n## plot\n\nplot_gam &lt;- function(x,date){\n  \n  clo &lt;- case_when(date == 1222 ~ \"Dec 2022\",\n                   date == 423 ~ \"Apr 2023\",\n                   date == 823 ~ \"Aug 2023\",\n                   date == 1223 ~ \"Dec 2023\")\n  clo2 &lt;- case_when(date == 1222 ~ \"#0808cf\",\n                    date == 423 ~ \"#ed097b\",\n                    date == 823 ~ \"#ed6b00\",\n                    date == 1223 ~ \"#33516b\")\n  \n  dtaa &lt;- case_when(date == 1222 ~ t1222,\n                    date == 423 ~ t423,\n                    date == 823 ~ t823,\n                    date == 1223 ~ t1223)\n  \n  x %&gt;% as.data.frame() %&gt;%\n    ggplot(aes(x = age,y = fit))+\n    geom_line(aes(col = clo))+\n    geom_ribbon(aes(x = age,y = fit,\n                    ymin=lwr, ymax=upr),alpha = 0.5,fill = clo2)+\n    ylim(0,101)+\n    theme_minimal() +\n  scale_color_manual(name = \"Y series\",\n                     values = c(clo = clo2))+\n    labs(y = \"Seroprevalence (%)\")+\n    geom_point(data= dtaa, aes(x = age, m * pos + 1),\n               shape = \"|\",\n               col = clo2)+\n    theme(\n      axis.text.x = element_text(size = 15),\n      axis.text.y = element_text(size = 15),\n      legend.position = \"hide\",\n      legend.text = element_text(size = 15),\n      axis.title.x = element_text(size = 15),\n      axis.title.y = element_text(size = 15))+\n    annotate(\"text\", x = 3, y = 90, label = c(clo),size = 6) \n}  \n\ng1222 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t1222) %&gt;% \n  predictg() %&gt;% plot_gam(date = 1222)  \n\ng423 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t423) %&gt;% \n  predictg() %&gt;% plot_gam(date = 423)  \n\ng823 &lt;-gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t823) %&gt;% \n  predictg() %&gt;% plot_gam(date = 823)  \n\ng1223 &lt;-gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t1223) %&gt;% \n  predictg() %&gt;% plot_gam(date = 1223)  \n\n\n\n\nCode\ng1222 | g423 | g823 | g1223"
  },
  {
    "objectID": "sero.html#constrain-in-each-time-point",
    "href": "sero.html#constrain-in-each-time-point",
    "title": "2  HFMD Seroprevalence",
    "section": "5.3 Constrain in each time point",
    "text": "5.3 Constrain in each time point\n\n\nCode\n## Constrain function\ncontrain &lt;- function(data1,data2){\n  new_data &lt;- data.frame(age = data2$age,\n                         fit = rep(0,nrow(data2)),\n                         lwr = rep(0,nrow(data2)),\n                         up = rep(0,nrow(data2)))\n  for (i in 1:512){\n    if(data2$fit[i] &lt; data1$fit[i]){\n      new_data$fit[i] &lt;- data1$fit[i]\n      new_data$lwr[i] &lt;- data1$lwr[i]\n      new_data$upr[i] &lt;- data1$upr[i]\n    } else{\n      new_data$fit[i] &lt;- data2$fit[i]\n      new_data$lwr[i] &lt;- data2$lwr[i]\n      new_data$upr[i] &lt;- data2$upr[i]\n    }\n  }\n  \n  new_data$fit &lt;- gam(fit ~ s(age),data = new_data)$fitted.values\n  new_data$lwr &lt;- gam(lwr ~ s(age),data = new_data)$fitted.values\n  new_data$upr &lt;- gam(upr ~ s(age),data = new_data)$fitted.values\n  \n  return(new_data)\n}\n\ntes1222 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t1222) %&gt;% \n  predictg() \ntes0423 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t423) %&gt;% \n  predictg() \ntes0823 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n               family = \"binomial\",data = t823) %&gt;% \n  predictg() \ntes1223 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n               family = \"binomial\",data = t1223) %&gt;% \n  predictg() \n\n## contrain \ncon423 &lt;- contrain(tes1222,tes0423)\ncon823 &lt;- contrain(con423,tes0823)\ncon1223 &lt;- contrain(con823,tes1223)\n\n\nc423 &lt;- con423 %&gt;% plot_gam(date = 423) \nc823 &lt;- con823 %&gt;% plot_gam(date = 823) \nc1223 &lt;- con1223 %&gt;% plot_gam(date = 1223) \n\n\n\n\nCode\ngam_contrain &lt;- g1222 | c423 | c823 | c1223\n\ngam_contrain/\n  ts"
  },
  {
    "objectID": "sero.html#fit-with-scam-model",
    "href": "sero.html#fit-with-scam-model",
    "title": "2  HFMD Seroprevalence",
    "section": "6.1 Fit with SCAM model",
    "text": "6.1 Fit with SCAM model\nmpi is monotone increasing SCOP-splines: bs=“mpi”. To achieve monotone increasing smooths this reparameterizes the coefficients so that they form an increasing sequence.\nModel\n\n\nCode\ns1 &lt;- scam(pos~s(age)+s(col_date,bs = \"mpi\"),family=binomial,\n           mutate(atdf, across(col_date, as.numeric)))"
  },
  {
    "objectID": "sero.html#d-plot",
    "href": "sero.html#d-plot",
    "title": "2  HFMD Seroprevalence",
    "section": "6.2 3D plot",
    "text": "6.2 3D plot\n\n\nCode\nage_val &lt;- c(.1,1:14)\n\ncollection_date_val &lt;- seq(min(atdf$col_date),\n                           max(atdf$col_date), le = 512)\n\nnew_data &lt;- expand.grid(age = age_val,\n                        col_date = as.numeric(collection_date_val))\n\nscamf &lt;- cbind(new_data,\n               fit = 100 * predict(s1, new_data,\"response\"))\n\nscamf$col_date &lt;- as.Date(scamf$col_date)\n\n\n\n\nCode\nplot_ly(scamf, x = ~sort(unique(as.Date(col_date))),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit, 15),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)"
  },
  {
    "objectID": "sero.html#d-plot-1",
    "href": "sero.html#d-plot-1",
    "title": "2  HFMD Seroprevalence",
    "section": "6.3 2-D plot",
    "text": "6.3 2-D plot\n\n\nCode\npredict2 &lt;- function(x, ci = .95, le = 512, m = 100){\n  p &lt;- (1 - ci) / 2\n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$model\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n  date_range &lt;- range(dataset$col_date)\n  dates &lt;- seq(date_range[1], date_range[2], le = le)\n\nout &lt;- x |&gt;\n  predict(expand.grid(age = ages,\n                        col_date = dates), se.fit = TRUE) |&gt;\n  extract(c(\"fit\", \"se.fit\")) %&gt;%\n  c(expand.grid(age = ages,\n               date = dates),\n    .) |&gt;\n  as_tibble() |&gt;\n  mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n  select(-se.fit)\n\nreturn(out)\n}\n\n\n\n\nCode\nout &lt;- predict2(s1)\n\nout$date &lt;- as.Date(out$date)\n\n\n\n\nCode\ns1222 &lt;- out %&gt;% filter(month(date) == 12 & year(date) == 2022) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#0808cf\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2022\"),size = 6)\n\ns423 &lt;- out %&gt;% filter(month(date) == 4 & year(date) == 2023) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Apr 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed097b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Apr 2023\" = \"#ed097b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Apr 2023\"),size = 6)\n\ns823 &lt;- out %&gt;% filter(month(date) == 8 & year(date) == 2023) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Aug 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed6b00\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Aug 2023\" = \"#ed6b00\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Aug 2023\"),size = 6)\n\ns1223 &lt;- out %&gt;% filter(month(date) == 12 & year(date) == 2023) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#33516b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2023\" = \"#33516b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2023\"),size = 6)\n\n\n\n\nCode\nresult_sero &lt;- s1222 | s423 | s823 | s1223\n\nresult_sero/\n  ts"
  },
  {
    "objectID": "sero.html#glm-with-pava-algorithm",
    "href": "sero.html#glm-with-pava-algorithm",
    "title": "2  HFMD Seroprevalence",
    "section": "6.4 GLM with PAVA algorithm",
    "text": "6.4 GLM with PAVA algorithm\nIn chapter 9 of 2012 serobook, there are an argument that following Friedman and Tibshirani (1984) and Mammen et al. (2001), Shkedy et al. (2003) suggested to estimate π(a) and λ(a) using local polynomials and smoothing splines and, if necessary, a posteriori apply the PAVA to isotonize the resulting estimate.\nWithout loss of generality they assume \\(\\pi(a_{1}) \\leq \\pi(a_{2}) \\leq ...\\leq \\pi(a_{i})\\). The PAVA states that if \\(\\pi(a_{i}) \\leq \\pi(a_{i - 1})\\) these values need to be “pooled.” In other words \\(\\hat{\\pi}(a_{i})\\) and \\(\\hat{\\pi}(a_{i-1})\\) are both replaced by\n\\[\\frac{\\hat{\\pi}(a_{i})+\\hat{\\pi}(a_{i-1})}{2}\\]\nIn my case, I fitted the glm to seropositive by age and time, then applied PAVA for fitted seroprevalence and 95% CI of each age group.\n\n   Model \n\nmod1 &lt;- glm(pos ~ age * col_date +\n              I(age ^ 2) * col_date, binomial,\n            mutate(atdf, across(col_date, as.numeric)))\n\n\n\n\nCode\nage_val &lt;- c(.1, seq(1,15,0.5))\ncollection_date_val &lt;- seq(min(atdf$col_date),\n                           max(atdf$col_date))\n\nnew_data &lt;- expand.grid(age = age_val, col_date = as.numeric(collection_date_val))\n\nprdcts &lt;- cbind(new_data, fit = 100 * predict(mod1, new_data, \"response\")) |&gt; \n  as_tibble() |&gt; \n  arrange(col_date) |&gt; \n  mutate(across(col_date, as_date))\n\n\n\n6.4.1 Unconstrained plot\n\n\nCode\nplot_ly(prdcts, x = ~sort(unique(as.Date(col_date))),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit, length(age_val)),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 700, height = 1000, margin = m)\n\n\n\n\n\n\n\n\n6.4.2 Applying PAVA algorithm\n\n\nCode\nlibrary(Iso)\nout_pava &lt;- prdcts %&gt;% \n  mutate(time_numeric = as.numeric(col_date)) %&gt;% \n  group_by(age) %&gt;% \n  arrange(time_numeric) %&gt;%\n  mutate(\n    seroprev_monotonic = pava(fit, time_numeric, decreasing = FALSE)\n  )\n\n\n\n\nCode\nplot_ly(out_pava,x = ~sort(unique(as.Date(col_date))),\n          y = ~sort(unique(age)),\n          z = ~matrix(seroprev_monotonic, length(age_val)),\n          showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 700, height = 1000, margin = m)\n\n\n\n\n\n\n\n\nCode\n## boostrap \n\nbootstrap &lt;- function(data, new_data) {\n  # Step 1: resample\n  boot_data &lt;- data %&gt;% slice_sample(n = nrow(data), replace = TRUE)\n  \n  # Step 2: refit model\n  mod &lt;- glm(pos ~ age * col_date + I(age^2) * col_date, \n             family = binomial, \n             data = mutate(boot_data, col_date = as.numeric(col_date)))\n  \n  # Step 3: predict\n  preds &lt;- predict(mod, new_data, type = \"response\") * 100  # seroprev %\n  preds_df &lt;- bind_cols(new_data, fit = preds) |&gt; \n    mutate(col_date = as_date(col_date))\n  \n  # Step 4: apply PAVA per age\n  preds_df %&gt;%\n    mutate(time_numeric = as.numeric(col_date)) %&gt;%\n    group_by(age) %&gt;%\n    arrange(time_numeric) %&gt;%\n    summarise(\n      col_date = col_date,\n      seroprev_monotonic = pava(fit, time_numeric, decreasing = FALSE),\n      .groups = \"keep\"\n    )\n}\n\n\nB &lt;- 10  # number of bootstrap iterations\n\nset.seed(42)  # for reproducibility\nboot_results &lt;- map_dfr(1:B, ~bootstrap(atdf, new_data) %&gt;% \n                          mutate(bootstrap = .x))\n\npoint_est &lt;- out_pava %&gt;% \n  mutate(col_time = case_when(\n    month(col_date) == 12 & year(col_date) == 2022 ~ \"Dec 2022\",\n    month(col_date) == 04 & year(col_date) == 2023 ~ \"Apr 2023\",\n    month(col_date) == 08 & year(col_date) == 2023 ~ \"Aug 2023\",\n    month(col_date) == 12 & year(col_date) == 2023 ~ \"Dec 2023\"\n  )) %&gt;% na.omit() %&gt;% \n  group_by(col_time,age) %&gt;%\n  summarise(\n    sp = mean(seroprev_monotonic)\n  )\n\nsp_ci &lt;- boot_results %&gt;% \n  mutate(col_time = case_when(\n    month(col_date) == 12 & year(col_date) == 2022 ~ \"Dec 2022\",\n    month(col_date) == 04 & year(col_date) == 2023 ~ \"Apr 2023\",\n    month(col_date) == 08 & year(col_date) == 2023 ~ \"Aug 2023\",\n    month(col_date) == 12 & year(col_date) == 2023 ~ \"Dec 2023\"\n  )) %&gt;% na.omit() %&gt;% \n  group_by(col_time,age) %&gt;%\n  summarise(\n    lower = quantile(seroprev_monotonic, 0.025),\n    upper = quantile(seroprev_monotonic, 0.975),\n    .groups = \"drop\"\n  )  \n\n# df.list &lt;- list(t1222,t423,t823,t1223)\n\nggplot() +\n  geom_line(data = point_est,aes(x = age, y = sp), color = \"blue\") +\n  geom_ribbon(data = sp_ci, aes(x = age,ymin = lower, ymax = upper), fill = \"blue\", alpha = 0.3) +\n  geom_point(aes(x = age, pos*100),\n             shape = \"|\",data = atdf)+\n  labs(y = \"Seroprevalence (%)\", x = \"Age (years)\") +\n  facet_wrap(~factor(col_time,levels = c(\"Dec 2022\",\"Apr 2023\",\"Aug 2023\",\"Dec 2023\")),\n             nrow = 1) +\n  scale_x_continuous(breaks = seq(0,15,by = 3), minor_breaks = NULL)+\n  scale_y_continuous(limits = c(0,100),breaks = seq(0,100,by = 25),\n                     labels = scales::label_percent(scale = 1), minor_breaks = NULL)+\n  theme_bw()+ \n  theme(axis.title.x = element_text(size = 18),\n        axis.text.x = element_text(size = 18),\n        legend.position = \"none\",\n        plot.tag = element_text(face = \"bold\", size = 18),\n        axis.title.y = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        strip.text.x = element_text(size = 18))"
  },
  {
    "objectID": "sero.html#gam-with-pava-algorithm",
    "href": "sero.html#gam-with-pava-algorithm",
    "title": "2  HFMD Seroprevalence",
    "section": "6.5 GAM with PAVA algorithm",
    "text": "6.5 GAM with PAVA algorithm\nModel\n\n\nCode\ngam1 &lt;- gam(pos ~ s(age, bs = \"bs\") + s(col_date, bs = \"bs\"), method = \"REML\",\n            family = \"binomial\",\n            data = mutate(atdf, across(col_date, as.numeric)))\n\n\n\n\nCode\ngam_pred &lt;- cbind(new_data, fit = 100 * predict(gam1, new_data, \"response\")) |&gt; \n  as_tibble() |&gt; \n  arrange(col_date) |&gt; \n  mutate(across(col_date, as_date))\n\nout &lt;- gam_pred %&gt;% \nmutate(time_numeric = as.numeric(col_date)) %&gt;% \n  group_by(age) %&gt;% \n  arrange(time_numeric) %&gt;%\n  mutate(\n    seroprev_monotonic = pava(fit, time_numeric, decreasing = FALSE)\n  ) \n  \nsp1222 &lt;- out %&gt;% filter(month(col_date) == 12 & year(col_date) == 2022) %&gt;% \n  group_by(age) %&gt;% \n  summarise(\n    sp = mean(seroprev_monotonic),\n  ) %&gt;% ggplot(aes(x = age,y = sp))+\n  geom_line()+\n  ylim(c(0,100))+\n  labs(tag = \"Dec 2022\",y = \"Seroprevalence (%)\")+\n  theme_minimal()\n\n\n\nsp0423 &lt;-out %&gt;% filter(month(col_date) == 04 & year(col_date) == 2023) %&gt;% \n  group_by(age) %&gt;% \n  summarise(\n    sp = mean(seroprev_monotonic),\n  ) %&gt;% ggplot(aes(x = age,y = sp))+\n  geom_line()+\n  ylim(c(0,100))+\n  labs(tag = \"Apr 2023\",y = \"Seroprevalence (%)\")+\n  theme_minimal()\n\nsp0823 &lt;- out %&gt;% filter(month(col_date) == 08 & year(col_date) == 2023) %&gt;% \n  group_by(age) %&gt;% \n  summarise(\n    sp = mean(seroprev_monotonic),\n  ) %&gt;% ggplot(aes(x = age,y = sp))+\n  geom_line()+\n  ylim(c(0,100))+\n  labs(tag = \"Aug 2023\",y = \"Seroprevalence (%)\")+\n  theme_minimal()\n\nsp1223 &lt;- out %&gt;% filter(month(col_date) == 12 & year(col_date) == 2023) %&gt;% \n  group_by(age) %&gt;% \n  summarise(\n    sp = mean(seroprev_monotonic),\n  ) %&gt;% ggplot(aes(x = age,y = sp))+\n  geom_line()+\n  ylim(c(0,100))+\n  labs(tag = \"Dec 2023\",y = \"Seroprevalence (%)\")+\n  theme_minimal()\n\n\n\n\nCode\nplot_ly(out, x = ~sort(unique(as.Date(col_date))),\n        y = ~sort(unique(age)),\n        z = ~matrix(seroprev_monotonic, length(age_val)),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 700, height = 1000, margin = m)\n\n\n\n\n\n\n\n\nCode\nsp1222 | sp0423 | sp0823 | sp1223"
  },
  {
    "objectID": "sero.html#unconstrained-fit",
    "href": "sero.html#unconstrained-fit",
    "title": "2  HFMD Seroprevalence",
    "section": "8.1 Unconstrained fit",
    "text": "8.1 Unconstrained fit\n\n\nCode\n# #| fig-width: 15\n# #| fig-height: 8\n# #| out-width: \"100%\"\n# glmfit &lt;- plot1222 | plot0423 | plot0823 | plot1223\n# \n# serum_dis/\n#   glmfit/\n#   ts\n# \n# ggsave(\"D:/OUCRU/hfmd/figure/EV71 present/uncon.svg\",dpi = 500,width = 15,height = 8,bg = \"white\")\n# ggsave(\"D:/OUCRU/hfmd/figure/EV71 present/uncon.png\",dpi = 500,width = 15,height = 8,bg = \"white\")"
  },
  {
    "objectID": "analysis_N.html#attack-rate",
    "href": "analysis_N.html#attack-rate",
    "title": "5  2023 HCMC HMFD outbreak",
    "section": "5.1 Attack rate",
    "text": "5.1 Attack rate\n\nattack_rates &lt;- map2(head(constrained_age_profiles_cohort2, -1),\n                     constrained_age_profiles_cohort2[-1],\n                     ~ left_join(na.exclude(.x), na.exclude(.y), \"cohort\") |&gt; \n                       mutate(attack = (fit.y - fit.x) / (1 - fit.x)))\n\n\ncensus2019 &lt;- readRDS(\"D:/OUCRU/hfmd/data/census2019.rds\")\n\nage_structure &lt;- census2019 |&gt; \n  filter(province == \"Thành phố Hồ Chí Minh\") |&gt; \n  group_by(age) |&gt; \n  summarise(n = sum(n)) |&gt; \n  mutate(across(age, ~ stringr::str_remove(.x, \" tuổi| \\\\+\") |&gt; as.integer())) |&gt; \n  arrange(age) |&gt; \n  filter(age &lt; 17)\n\nwith(age_structure,\n     plot(age - 1, n, type = \"s\", ylim = c(0, 110000), col = 4, lwd = 3,\n          xlab = \"age classes (years)\", ylab = \"number of children\"))\nabline(v = 0:15, col = \"grey\")"
  },
  {
    "objectID": "analysis_N.html#expected-incidence-from-seroprevalence",
    "href": "analysis_N.html#expected-incidence-from-seroprevalence",
    "title": "5  2023 HCMC HMFD outbreak",
    "section": "5.2 Expected incidence from seroprevalence",
    "text": "5.2 Expected incidence from seroprevalence\n\nmod &lt;- lm(n ~ age, age_structure)\n\nincidences &lt;- map(attack_rates,\n                  ~ mutate(.x, incidence = (1 - fit.x) * attack *\n                                             predict(mod, list(age = age.x))))\n\nincidences %&gt;% \n  bind_rows(.id = \"id\") %&gt;% \n  ggplot(aes(x = age.x, y = incidence,color = id))+\n  geom_line()+\n  coord_cartesian(ylim = c(0,20000))+\n  theme(legend.position = \"hide\")+\n  theme_minimal()+\n  theme(legend.position = \"hide\")"
  },
  {
    "objectID": "analysis_N.html#incidence-of-hospitalization",
    "href": "analysis_N.html#incidence-of-hospitalization",
    "title": "5  2023 HCMC HMFD outbreak",
    "section": "5.3 Incidence of hospitalization",
    "text": "5.3 Incidence of hospitalization\n\nhfmd_incidence &lt;- readRDS(\"D:/OUCRU/hfmd/data/hfmd_incidence.rds\")\n\nincidence1 &lt;- hfmd_incidence %&gt;% \n  filter(year(adm_date) == 2023) %&gt;% \n  mutate(adm_date2 = as.numeric(adm_date),\n         cohort = interval(dob, \"2023-01-01\") / years(1)) \n\n\nmean_collection_times &lt;- hfmd |&gt; \n  group_by(collection) |&gt; \n  summarise(mean_col_date = mean(col_date2)) |&gt; \n  with(setNames(mean_col_date, collection))\n\nouut &lt;- list()\n\nfor (i in 1:3){\n  ouut[[i]] &lt;- incidence1 %&gt;% \n    filter(adm_date2 &gt;= as.numeric(mean_collection_times[i]) & \n             adm_date2 &lt;= as.numeric(mean_collection_times[i+1])) %&gt;% \n    mutate(age_gr = cut(cohort, breaks = seq(0,16),right = T)) %&gt;% \n    na.omit(age_gr) %&gt;%\n    group_by(age_gr) %&gt;% \n    count() %&gt;% \n    mutate(age_gr2 = as.numeric(age_gr)) %&gt;% \n    gam(n ~ s(age_gr2),data = .) %&gt;% \n    predict(list(age_gr2 = incidences[[i]]$age.x))%&gt;%\n    tibble(age = incidences[[i]]$age.x,\n           incidence  = .)\n}\n\nouut %&gt;% \n  bind_rows(.id = \"id\") %&gt;% \n  ggplot(aes(x = age, y = incidence,color = id))+\n  geom_line()+\n  coord_cartesian(ylim = c(0,10000))+\n  theme_minimal()+\n  theme(legend.position = \"hide\")"
  },
  {
    "objectID": "analysis_N.html#probability-of-hospitalization",
    "href": "analysis_N.html#probability-of-hospitalization",
    "title": "5  2023 HCMC HMFD outbreak",
    "section": "5.4 Probability of hospitalization",
    "text": "5.4 Probability of hospitalization\n\nmap2(ouut, incidences, ~inner_join(.x, .y, by = join_by(age == age.x)) %&gt;% \n       mutate(prob = (incidence.x/incidence.y)*100)) %&gt;% \n  bind_rows(.id = \"id\") %&gt;% \n  ggplot(aes(x = age, y = prob,color = id))+\n  geom_line()+\n  theme_minimal()+\n  theme(legend.position = \"hide\")"
  },
  {
    "objectID": "tsir_r0.html#data",
    "href": "tsir_r0.html#data",
    "title": "6  Estimating the basic reproduction rate of HFMD using the time series SIR model in Ho Chi Minh City",
    "section": "6.1 Data",
    "text": "6.1 Data\n\nI used HFMD surveillance data from 2022–2023. Although we have time-series incidence data from 2013–2023, my previous analysis showed that the performance of the tSIR model was affected by COVID-19 quarantine measures. See here. The case data were aggregated biweekly.\nWe obtained birth data for each district in Ho Chi Minh City from 2017–2022. I aggregated the data biweekly and used a GAM model to fit the birth trends across biweeks of each year (1–26), from biweek 1 of 2017 to biweek 5 of 2022 (week 135). The model used was: \\[\nbirth \\sim biweek_{1-26} + biweek_{1-135}\n\\] and predictions were extended to week 182 (week 16 of 2023).\nFor population data, I used the 2019 census and searched for the annual population growth rate from 2019–2024. Using this, I generated a biweekly population sequence for each district.\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(mgcv)\nlibrary(patchwork)\nlibrary(odin)\nlibrary(tsiR)\nlibrary(janitor)\ninvisible(Sys.setlocale(\"LC_TIME\", \"English\"))\n\n\n\n\nCode\n#### birth data\nhcm_birth_data &lt;- readRDS(\"D:/OUCRU/hfmd/hcm_birth_data.rds\")\nhcm_birth_data$district_reg &lt;- hcm_birth_data$district_reg %&gt;%\n  str_replace_all(c(\"Quận 2\"  = \"Thủ Đức\",\n                    \"Quận 9\"  = \"Thủ Đức\"))\n\nhcm_birth_data$district_reg &lt;- hcm_birth_data$district_reg %&gt;% str_replace_all(\n  c( \"Gò vấp\"  = \"Gò Vấp\"))\n\nhcm_birth_data$district_reg &lt;- hcm_birth_data$district_reg %&gt;%\n  str_remove(\"Quận|Huyện|Thành phố\") %&gt;%\n  trimws(which = \"both\")\n\nbirth_district &lt;- hcm_birth_data %&gt;%\n  group_by(district_reg) %&gt;%\n  group_modify(~ .x |&gt; filter(birth_year &gt;= 2017)%&gt;%\n                 group_by(birth_week,birth_year) %&gt;%\n                 summarise(n = sum(n),.groups = \"drop\") %&gt;%\n                 mutate(birth_week = replace(birth_week, birth_week == 53, 52),\n                        biweek = (birth_week + 1) %/% 2) %&gt;%\n                 arrange(birth_year) %&gt;%\n                 group_by(birth_year, biweek) %&gt;%\n                 summarise(biweek_birth = sum(n), .groups = \"drop\") %&gt;%\n                 mutate(biweek2 = 1:nrow(.))\n                 )\n\ncutpoint &lt;- 135\n\nbirth_district2 &lt;- birth_district %&gt;% filter(biweek2 &lt;= cutpoint) %&gt;%\n  group_split()\n\nmodelaa &lt;- birth_district %&gt;% filter(biweek2 &lt;= cutpoint) %&gt;%\n  group_split() %&gt;%\n  map(\\(df)gam(biweek_birth ~ s(biweek) + s(biweek2),method = \"REML\",data = df))\n\nnewdata &lt;- data.frame(\n  biweek  = rep(1:26, 2024 - 2017),\n  biweek2 = 1:(26 * (2024 - 2017))\n)\n\npredicted_birth_district &lt;- map2_dfr(modelaa, birth_district2, \\(mod, df) {\n  newdata %&gt;%\n    mutate(\n      predicted   = predict(mod, newdata = newdata, type = \"response\"),\n      district_reg = unique(df$district_reg),\n      birth_year = rep(2017:2023, each = 26)\n    )\n})\n\n\n\n\nCode\n## plot\npredicted_birth_district %&gt;%\n  ggplot(aes(x = biweek2,y = predicted)) +\n  geom_line()+\n  geom_point(data = birth_district2 %&gt;% bind_rows(),aes(x = biweek2,y = biweek_birth))+\n  facet_wrap(~district_reg,ncol  = 4,scales = \"free\")+\n  theme_minimal()\n\n\n\n\n\nResults of the GAM model for birth data in each district of Ho Chi Minh City.\n\n\n\n\n\n\nCode\ndf1 &lt;- read_excel(\"D:/OUCRU/hfmd/data/TCM_full.xlsx\", \n                  col_types = c(\"date\", \"numeric\", \"text\", \n                                \"text\", \"text\", \"date\", \"date\", \"date\", \n                                \"text\", \"text\", \"text\"))\ncolnames(df1) &lt;- c(\"dob\", \"age\", \"gender\", \"commune\", \"district\",\n                   \"reported_date\", \"onset_date\",\"adm_date\",\n                   \"medi_cen\",\"inout\",\"severity\")\ndf1$dob &lt;- df1$dob %&gt;% as_date()\ndf1$adm_date &lt;- df1$adm_date %&gt;% as_date()\n\ndf1$age1 &lt;- interval(df1$dob, df1$adm_date) / years(1)\ndf1$adm_week &lt;- as.Date(floor_date(df1$adm_date, \"week\"))\ndf1$district &lt;- df1$district %&gt;% str_replace_all(\n  c( \"Quận Gò vấp\"  = \"Quận Gò Vấp\"))\ndf1$district &lt;- df1$district %&gt;% \n  str_remove(\"Quận|Huyện|Thành phố\") %&gt;%\n  trimws(which = \"both\") \n\ncase_district &lt;- df1 %&gt;%\n  group_by(district) %&gt;%\n  group_modify(~ .x |&gt; filter(year(adm_date) &gt;= 2017 & year(adm_date) &lt;= 2023) %&gt;%\n                 group_by(adm_week) %&gt;% count() %&gt;%\n                 mutate(week = week(adm_week),\n                        year = year(adm_week),\n                        week = replace(week, week == 53, 52),\n                        biweek = (week + 1) %/% 2) %&gt;%\n                 group_by(year, biweek) %&gt;%\n                 summarise(biweek_cases = sum(n), .groups = \"drop\")\n               )\n\ncase_birth_district_1723 &lt;- full_join(predicted_birth_district,case_district,\n          by =c(\n            \"district_reg\" = \"district\",\n            \"birth_year\" = \"year\",\n            \"biweek\" = \"biweek\"\n          ))\n\n\n\n\nCode\n## population\ncensus2019 &lt;- readRDS(\"D:/OUCRU/hfmd/data/census2019.rds\")\ncensus2019$district &lt;- census2019$district %&gt;%\n  str_replace_all(c(\"Quận 2\"  = \"Quận Thủ Đức\",\n                    \"Quận 9\"  = \"Quận Thủ Đức\")) %&gt;%\n  str_remove_all(\"Quận|Huyện\") %&gt;%\n  trimws(which = \"both\")\n\n\npopqh &lt;- census2019 %&gt;% filter(province == \"Thành phố Hồ Chí Minh\") %&gt;%\n  group_by(district) %&gt;% summarise(pop = sum(n))\n\nr1920 &lt;- 9227.6/9038.6\nr2021 &lt;- 9166.8/9227.6\nr2122 &lt;- 9389.7/9166.8\nr2223 &lt;- 9456.7/9389.7\n\npopqh$pop20 &lt;- popqh$pop*r1920\npopqh$pop21 &lt;- popqh$pop20*r2021\npopqh$pop22 &lt;- popqh$pop21*r2122\npopqh$pop23 &lt;- popqh$pop22*r2223\npopqh$pop24 &lt;- popqh$pop23*r2223\n\npop_district &lt;- popqh %&gt;%\n  pivot_longer(\n    cols = starts_with(\"pop\"),\n    names_to = \"year\",\n    values_to = \"population\"\n  ) %&gt;%\n  mutate(\n    year = case_when(\n      year == \"pop\" ~ 2019L,  # base year\n      TRUE ~ as.integer(sub(\"pop\", \"20\", year))\n    )\n  ) %&gt;%\n  arrange(district, year) %&gt;%\n  group_by(district) %&gt;%\n  arrange(year) %&gt;%\n  mutate(next_pop = lead(population),\n         next_year = lead(year)) %&gt;%\n  filter(!is.na(next_pop)) %&gt;%\n  group_by(district, year) %&gt;%\n  do({\n    tibble(\n      district = .$district,\n      year = .$year,\n      biweek = 1:26,\n      population = seq(.$population, .$next_pop, length.out = 27)[-27]  # exclude endpoint\n    )\n  })"
  },
  {
    "objectID": "tsir_r0.html#method-and-results",
    "href": "tsir_r0.html#method-and-results",
    "title": "6  Estimating the basic reproduction rate of HFMD using the time series SIR model in Ho Chi Minh City",
    "section": "6.2 Method and results",
    "text": "6.2 Method and results\n\n6.2.1 tSIR model\nI aggregated the data into bi-weekly time steps, and there are twenty-six period \\(period_1,...,period_{26})\\) per year. The \\(cases_t\\) was adjusted to the infected part \\(I_{adj,t}\\) for the TSIR model by multiplying by a derivative function:\n\\[\n\\begin{align}\n\\rho = \\frac{d\\hat{Y}_{cumBirths}}{dX_{cumCases}} \\\\\nI_{adj,t} = cases_t \\times \\rho\n\\end{align}\n\\]\nThe cumulate number of cases \\((X_{cumCases})\\) and births \\((Y_{cumBiths})\\) were calculated by the numbers of HFMD cases \\((cases_t)\\) and the births. The \\(\\hat{Y}_{cumBirths}\\) was obtained by fitting the locally weighted scatterplot smoothing (LOWESS) non-parametric regression:\n\\[\n\\hat{Y}_{cumBirths} = Lowess(X_{cumCases},Y_{cumBirths},f = 2/3)\n\\]\n\n\nCode\npop_district2223 &lt;- pop_district %&gt;%\n  filter(year &gt;= 2022)\n\ncase_birth_district_2223 &lt;- case_birth_district_1723 %&gt;%\n  mutate(biweek_cases = replace_na(biweek_cases, 1)) %&gt;%\n  filter(birth_year &gt;= 2022)\n\n\ndt_tsir_district_2223 &lt;- full_join(case_birth_district_2223,pop_district2223,\n                                      by =c(\n                                        \"district_reg\" = \"district\",\n                                        \"birth_year\" = \"year\",\n                                        \"biweek\" = \"biweek\"\n                                      )) %&gt;%\n  select(district_reg,birth_year,biweek_cases,predicted,population)\n\noutcome &lt;- dt_tsir_district_2223 %&gt;%\n  group_by(district_reg) %&gt;%\n  group_modify(~.x %&gt;% mutate(time = seq(2022, 2024, length.out = 52))) %&gt;%\n  ungroup() %&gt;% select(district_reg,time,biweek_cases,predicted,population) %&gt;%\n  magrittr::set_colnames(c(\"district\",\"time\",\"cases\",\"births\",\"pop\")) %&gt;%\n  group_by(district) %&gt;%\n  group_split() %&gt;%\n  map(\\(df)runtsir(data = df[,-1], IP = 2, xreg = \"cumcases\",\n                   regtype = \"lowess\",alpha = NULL, sbar = NULL,\n                   method = \"deterministic\", nsim = 1000,\n                   family = \"gaussian\", link = \"identity\"))\n\nbbbbb &lt;- map(outcome, ~ data.frame(\n  time = .x$time,\n  fit = .x$res$mean,\n  s = .x$simS$mean,\n  beta = .x$contact\n))\n\naaaaa &lt;- dt_tsir_district_2223 %&gt;%\n  group_by(district_reg) %&gt;%\n  group_modify(~.x %&gt;% mutate(time = seq(2022, 2024, length.out = 52))) %&gt;%\n  ungroup() %&gt;% select(-birth_year) %&gt;%\n  magrittr::set_colnames(c(\"district\",\"cases\",\"births\",\"pop\",\"time\")) %&gt;%\n  group_by(district) %&gt;%\n  group_split()\n\ndata_result &lt;- map2(aaaaa, bbbbb, ~ left_join(.x, .y, by = \"time\"))%&gt;%\n  bind_rows()\n\n\n\n\nCode\n## plot\ndata_result %&gt;%\n  ggplot(aes(x = time))+\n  geom_line(aes(group = 1,y = cases,linetype = \"cases reported\"))+\n  geom_line(aes(group = 1,y = fit,linetype = \"model fitted\"))+\n  facet_wrap(~district,scales = \"free\",ncol = 4)+\n  scale_linetype_manual(values = c(\"cases reported\" = \"dashed\",\n                                   \"model fitted\" = \"solid\"),\n                        name=\"Analysis Type\")+\n  scale_x_continuous(breaks = c(2022,2023,2024))+\n  theme_bw()+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nResult of tSIR fitting\n\n\n\n\n\n\nCode\ndata_result %&gt;% filter(district != \"Thủ Đức\") %&gt;%  \n  ggplot(aes(x = time))+\n  geom_line(aes(y = beta.beta))+\n  geom_ribbon(aes(ymin = beta.betalow,\n                  ymax = beta.betahigh),fill = \"blue\",alpha = 0.3)+\n  facet_wrap(~district,ncol = 4)+\n  labs(x = \"time\", y =\"contact rate\")+\n  scale_x_continuous(breaks = c(2022,2023,2024))+\n  theme_minimal()\n\n\n\n\n\nInfectious contact rate of each district from 2022 to 2023\n\n\n\n\n\n\n\n\n\n\nFinding\n\n\n\nWhile the number of HFMD cases in District 1 is relatively low, the contact rate during outbreaks is notably the highest among all districts.\n\n\n\n\n6.2.2 Basic reproduction rate and herd immunity threshold\nThe \\(R_0\\) was derived according to the concepts of the next generation matrix. While the next generation matrix was replaced by the seasonal transmission parameters \\(\\beta_{1,...,26}\\) in our study. The \\(\\beta_{1,...,26}\\) were the regression coefficients of the tSIR model, and could be estimated by using the algorithm of iteratively reweighted least squares (IRLS)\n\\[\nR0_{1,...,26} = \\beta_{1,...,26}\\times \\bar{S}\n\\]\nHerd immunity threshold (HIT) is the proportion of a population that must be vaccinated to become immune so that an infectious disease can become stable in that community. When the proportion is reached by vaccination, each case leads to a single new case and the infection becomes stable. We calculated the HIT by:\n\\[\nHIT = 1 - \\frac{1}{R0}\n\\]\n\n6.2.2.1 District-specific R0 and HIT of HFMD in HCMC.\n\n\nCode\nr0_hit &lt;- data_result %&gt;%\n  group_by(district) %&gt;%\n  filter(time &gt; 2023 & district != \"Thủ Đức\") %&gt;%\n  group_modify(~.x %&gt;%\n                 mutate(r0 = beta.beta*s)) %&gt;%\n  summarise(p25_r0 = quantile(r0,0.25),\n            median_r0 = median(r0),\n            p75_r0 = quantile(r0,0.75),\n            hit = (1 - (1/median_r0))*100)\n\nr0_hit &lt;- r0_hit %&gt;% filter(hit &gt; 0) %&gt;% as.data.frame()\nlibrary(knitr)\nkable(r0_hit)\n\n\n\n\n\ndistrict\np25_r0\nmedian_r0\np75_r0\nhit\n\n\n\n\n1\n5.181057\n10.704062\n19.018194\n90.65775\n\n\n10\n2.811688\n5.288984\n7.474946\n81.09278\n\n\n11\n2.505858\n4.051408\n5.057597\n75.31723\n\n\n12\n1.922424\n2.417594\n3.406859\n58.63656\n\n\n3\n1.702278\n2.571781\n3.436301\n61.11645\n\n\n4\n2.584450\n3.574817\n5.511720\n72.02654\n\n\n5\n1.769346\n2.530836\n3.486931\n60.48737\n\n\n6\n2.226285\n3.011215\n3.900894\n66.79081\n\n\n7\n2.356067\n2.972081\n4.089846\n66.35354\n\n\n8\n1.618056\n2.350634\n3.129286\n57.45828\n\n\nBình Chánh\n2.824292\n4.018811\n5.023054\n75.11702\n\n\nBình Thạnh\n3.087578\n5.371727\n6.608702\n81.38401\n\n\nBình Tân\n2.377875\n3.345409\n4.560535\n70.10829\n\n\nCần Giờ\n1.741731\n2.543073\n3.685242\n60.67749\n\n\nCủ Chi\n2.656621\n4.650120\n7.328248\n78.49518\n\n\nGò Vấp\n2.775346\n3.286195\n4.467266\n69.56967\n\n\nHóc Môn\n2.410432\n3.846697\n5.386281\n74.00367\n\n\nNhà Bè\n2.650263\n3.746345\n4.854769\n73.30732\n\n\nPhú Nhuận\n2.022882\n2.563387\n3.186873\n60.98911\n\n\nTân Bình\n2.433386\n3.609762\n4.668092\n72.29734\n\n\nTân Phú\n2.154922\n2.764867\n3.901688\n63.83189\n\n\n\n\n\n\n\n6.2.2.2 Heatmap and dendrogram of R0\n\n\nCode\nlibrary(ggdendro)\nlibrary(patchwork)\n\nbeta_2023_district &lt;- data_result %&gt;% \n  filter(time &gt; 2023) %&gt;% \n  select(district,beta.time,beta.beta) %&gt;% \n  pivot_wider(names_from = beta.time,values_from = beta.beta)\n\nbeta_2023_district &lt;- column_to_rownames(beta_2023_district, var = \"district\")\nd &lt;- stats::dist(beta_2023_district)\n\ntreeC &lt;- hclust(d, method=\"ward.D2\")\ndg &lt;- as.dendrogram(treeC)\nddata_analytes &lt;- dendro_data(dg, type = \"rectangle\")\n\nHAC_district &lt;- ggplot() +\n  geom_segment(\n    data = segment(ddata_analytes),\n    aes(x = x, y = y, xend = xend, yend = yend),\n    position = position_nudge(x = -0.5)\n  ) +\n  coord_flip(clip = \"off\") +\n  scale_y_reverse() +\n  scale_x_continuous(limits = c(0, 22), expand = c(0, 0)) +\n  theme_dendro() +\n  theme(plot.margin = unit(c(0, 0, 0, 0), \"mm\"))\n  geom_text(\n    data = label(ddata_analytes),\n    aes(x = x, y = -1, label = label),\n    size = 3.5, color = \"#444444\", vjust = 2, angle = 0, hjust = 0\n  ) \n\ndisaaa &lt;- label(ddata_analytes)[3] %&gt;% as.data.frame() %&gt;% pull(label) %&gt;% as.character()\n\nheatmap_r0 &lt;- data_result %&gt;%\n  group_by(district) %&gt;%\n  group_modify(~.x %&gt;% mutate(r0 = beta.beta*s,\n                              beta.time = beta.time*2)) %&gt;%\n  bind_rows() %&gt;% filter(time &gt; 2023 & district != \"Thủ Đức\") %&gt;%\n  ggplot(aes(x = as.factor(beta.time),\n             y = factor(district,levels = disaaa),\n             fill = r0)) +\n  geom_tile()+\n  # scale_fill_paletteer_c(\"grDevices::Inferno\")+\n  scale_fill_gradient(low=\"yellow\", high=\"red\",\n                      name = \"R0\")+\n  scale_y_discrete(position = \"right\")+\n  scale_x_discrete(name = \"Week\")+\n  theme_minimal()+\n  theme(legend.position = \"bottom\",\n        axis.title.y = element_blank(),\n        axis.text.x = element_text(size  = 10),\n        axis.text.y = element_text(size  = 10))\n\nca &lt;- dt_tsir_district_2223 %&gt;%\n  group_by(district_reg) %&gt;%\n  group_modify(~.x %&gt;% mutate(time = seq(2022, 2024, length.out = 52))) %&gt;%\n  ungroup() %&gt;% select(district_reg,time,biweek_cases,predicted,population) %&gt;% \n  group_by(time) %&gt;% \n  summarise(cases = sum(biweek_cases)) %&gt;% \n  filter(time &gt; 2023) %&gt;% mutate(biweek = (1:nrow(.))*2) %&gt;% \n  ggplot(aes(x = biweek, y =cases)) + \n  geom_bar(stat = \"identity\")+\n  theme_minimal()+\n  scale_x_discrete(breaks = seq(2,52,by=2))+\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank())\n\n\n\n\nCode\nup &lt;- (plot_spacer()+ca)+\n  plot_layout(widths = c(1,2))\n\ndown &lt;- (HAC_district + heatmap_r0 )+\n  plot_layout(widths = c(1,2))\n\nup /\n  down +\n  plot_layout(heights = c(1,3))\n\n\n\n\n\nHeatmap of bi-weekly R0 by district. The dendrogram on the left side was the result of the clustering analysis\n\n\n\n\n\n\n\n6.2.3 Cluster analysis\nBased on patterns of biweekly \\(R_0\\), I applied hierarchical clustering. Then, based on the dendrogram and I cut the tree to 5 branches and plotted the results on a map to explore potential geographical relationships between clusters.\n\n\nCode\n## setup hcm map\n\nlibrary(sf)\nlibrary(stringi)\nmap_path &lt;- \"D:/OUCRU/HCDC/project phân tích sero quận huyện/\"\nvn_qh &lt;- st_read(dsn = file.path(map_path, \"gadm41_VNM.gpkg\"), layer = \"ADM_ADM_2\")\n\nvn_qh1 &lt;- vn_qh %&gt;%\n  clean_names() %&gt;%     ## cho thành chữ thường\n  filter(\n    str_detect(\n      name_1,\n      \"Hồ Chí Minh\"\n    )\n  )\nqhtp &lt;- vn_qh1[-c(14,21),]\n\nqhtp$geom[qhtp$varname_2 == \"Thu Duc\"] &lt;- vn_qh1[c(\"21\",\"24\",\"14\"),] %&gt;%\n  st_union()\n\nqhtp &lt;- qhtp %&gt;% st_cast(\"MULTIPOLYGON\")\nqhtp$varname_2 &lt;- stri_trans_general(qhtp$varname_2, \"latin-ascii\") %&gt;%\n  tolower() %&gt;%\n  str_remove(\"district\") %&gt;%\n  trimws(which = \"both\")\n\nqhtp$nl_name_2 &lt;- c(\"BC\",\"BTân\",\"BT\",\"CG\",\"CC\",\"GV\",\n                    \"HM\",\"NB\",\"PN\",\"1\",\"10\",\"11\",\"12\",\n                    \"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"TB\",\n                    \"TP\",\"TĐ\")\n\n\n\n\nCode\ncut &lt;- cutree(treeC, k=5) %&gt;% as.data.frame() %&gt;% \n  rownames_to_column(var = \"district\") \ncolnames(cut) &lt;- c(\"district\",\"cluster\")\n\ncut %&gt;% \n  mutate(district2 = stri_trans_general(cut$district, \"latin-ascii\") %&gt;%\n                    tolower() %&gt;%\n                    str_remove(\"district\") %&gt;%\n                    trimws(which = \"both\")) %&gt;% \n  filter(district != \"Thủ Đức\") %&gt;% \nleft_join(qhtp, ., by = join_by(varname_2 == district2)) %&gt;% \n  ggplot() +\n  geom_sf(aes(fill = factor(cluster)),show.legend = T)+\n  scale_fill_discrete(name = \"Cluster\",na.translate = FALSE)+\n  geom_sf_text(aes(label = nl_name_2),size=2.5)+\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nFinding\n\n\n\nThere was a geographical relationship between districts within each cluster."
  },
  {
    "objectID": "tsir_r0.html#discussion",
    "href": "tsir_r0.html#discussion",
    "title": "6  Estimating the basic reproduction rate of HFMD using the time series SIR model in Ho Chi Minh City",
    "section": "6.3 Discussion",
    "text": "6.3 Discussion\n\nThe patterns of \\(R_0\\) for each district correspond well with the incidence data.\nDistrict 1 has the highest median \\(R_0\\), despite having a relatively low number of reported cases. This can be explained by its high contact rate, due to its role as the central area of Ho Chi Minh City, with a large volume of travelers, numerous schools, hospitals, and public activities. Nearby districts, such as Districts 10 and 4, have the second-highest median \\(R_0\\) values. This reflects a geographical relationship among districts in the central area.\nThis analysis provides a clearer picture of the HFMD burden in Ho Chi Minh City, highlighting how transmission intensity is concentrated in areas with high population mobility and dense infrastructure.\nIn this analysis, I estimated two key epidemiological parameters—\\(R_0\\) and the herd immunity threshold (\\(HIT\\))—for HFMD transmission in 2023. This information can support decision-making in controlling and preventing HFMD outbreaks. For example, if an HFMD vaccine is implemented in Ho Chi Minh City, we can prioritize District 1 and nearby districts that share similar patterns identified through clustering analysis. Our target would be to achieve the herd immunity threshold in each district.\nFor the clustering analysis, we grouped districts with similar infectious patterns and geographical relationships. This approach can help guide more effective prevention and control strategies by targeting groups of districts rather than treating them individually."
  },
  {
    "objectID": "tsir_r0.html#reference",
    "href": "tsir_r0.html#reference",
    "title": "6  Estimating the basic reproduction rate of HFMD using the time series SIR model in Ho Chi Minh City",
    "section": "6.4 Reference",
    "text": "6.4 Reference\n\n\n\n\nDu, Zhicheng, Wangjian Zhang, Dingmei Zhang, Shicheng Yu, and Yuantao Hao. 2017. “Estimating the Basic Reproduction Rate of HFMD Using the Time Series SIR Model in Guangdong, China.” PLOS ONE 12 (7): e0179623. https://doi.org/10.1371/journal.pone.0179623."
  }
]