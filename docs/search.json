[
  {
    "objectID": "sero.html",
    "href": "sero.html",
    "title": "2  HFMD Seroprevalence",
    "section": "",
    "text": "3 Import data\nCode\npredict2 &lt;- function(x, ci = .95, le = 512, m = 100) {\n  p &lt;- (1 - ci) / 2\n\n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$data\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n\n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n\n  x |&gt;\n    predict(data.frame(age = ages), se.fit = TRUE) |&gt;\n    extract(c(\"fit\", \"se.fit\")) %&gt;%\n    c(age = list(ages), .) |&gt;\n    as_tibble() |&gt;\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n    select(- se.fit)\n}\nCode\nlibrary(plotly)\nlibrary(scam)\nCode\natdf &lt;- rbind(t1222,t423,t823,t1223) %&gt;%\n  mutate(col_date = make_date(year = col_year,\n                              month = col_month,\n                              day = col_day)) %&gt;%\n  select(age,col_date,pos)\nCode\nhead(atdf)\n\n\n         age   col_date pos\n1 0.36986301 2022-12-28   0\n2 0.33150685 2022-12-27   0\n3 0.07671233 2023-01-04   0\n4 0.43835616 2022-12-27   0\n5 0.93150685 2023-01-03   0\n6 1.95616438 2022-12-26   1"
  },
  {
    "objectID": "sero.html#fit-by-glm",
    "href": "sero.html#fit-by-glm",
    "title": "2  HFMD Seroprevalence",
    "section": "5.1 Fit by GLM",
    "text": "5.1 Fit by GLM\n\n\nCode\nm &lt;- 100\neps &lt;- 1\n\nplot1222 &lt;-  glm(pos ~ age, binomial, data = t1222) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5)+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence(%)\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",size = 3,\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.title= element_blank(),\n    legend.position = \"inside\",\n    legend.position.inside =  c(0.15,0.80),\n    legend.text = element_text(size = 15))\n\n\n\n\nCode\nplot1222 &lt;-  glm(pos ~ age, binomial, data = t1222) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#0808cf\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2022\"),size = 6)\n\nplot0423 &lt;-  glm(pos ~ age + I(age ^2), binomial, data = t423) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Apr 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed097b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Apr 2023\" = \"#ed097b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t423, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed097b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Apr 2023\"),size = 6)\n\nplot0823 &lt;-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t823) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Aug 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed6b00\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Aug 2023\" = \"#ed6b00\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t823, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed6b00\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Aug 2023\"),size = 6)\n\nplot1223 &lt;-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t1223) |&gt;\n  predict2() %&gt;% as.data.frame() %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#33516b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2023\" = \"#33516b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t1223, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#33516b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2023\"),size = 6)\n\n\n\n\nCode\nplot1222 + plot0423 + plot0823 + plot1223"
  },
  {
    "objectID": "sero.html#fit-with-scam-model",
    "href": "sero.html#fit-with-scam-model",
    "title": "2  HFMD Seroprevalence",
    "section": "6.1 Fit with SCAM model",
    "text": "6.1 Fit with SCAM model\nmpi is monotone increasing SCOP-splines: bs=“mpi”. To achieve monotone increasing smooths this reparameterizes the coefficients so that they form an increasing sequence.\nModel\n\n\nCode\ns1 &lt;- scam(pos~s(age)+s(col_date,bs = \"mpi\"),family=binomial,\n           mutate(atdf, across(col_date, as.numeric)))"
  },
  {
    "objectID": "sero.html#d-plot",
    "href": "sero.html#d-plot",
    "title": "2  HFMD Seroprevalence",
    "section": "6.2 3D plot",
    "text": "6.2 3D plot\n\n\nCode\nage_val &lt;- c(.1,1:14)\n\ncollection_date_val &lt;- seq(min(atdf$col_date),\n                           max(atdf$col_date), le = 512)\n\nnew_data &lt;- expand.grid(age = age_val,\n                        col_date = as.numeric(collection_date_val))\n\nscamf &lt;- cbind(new_data,\n               fit = 100 * predict(s1, new_data,\"response\"))\n\nscamf$col_date &lt;- as.Date(scamf$col_date)\n\n\n\n\nCode\nplot_ly(scamf, x = ~sort(unique(as.Date(col_date))),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit, 15),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)"
  },
  {
    "objectID": "sero.html#d-plot-1",
    "href": "sero.html#d-plot-1",
    "title": "2  HFMD Seroprevalence",
    "section": "6.3 2-D plot",
    "text": "6.3 2-D plot\n\n\nCode\npredict2 &lt;- function(x, ci = .95, le = 512, m = 100){\n  p &lt;- (1 - ci) / 2\n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$model\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n  date_range &lt;- range(dataset$col_date)\n  dates &lt;- seq(date_range[1], date_range[2], le = le)\n\nout &lt;- x |&gt;\n  predict(expand.grid(age = ages,\n                        col_date = dates), se.fit = TRUE) |&gt;\n  extract(c(\"fit\", \"se.fit\")) %&gt;%\n  c(expand.grid(age = ages,\n               date = dates),\n    .) |&gt;\n  as_tibble() |&gt;\n  mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n  select(-se.fit)\n\nreturn(out)\n}\n\n\n\n\nCode\nout &lt;- predict2(s1)\n\nout$date &lt;- as.Date(out$date)\n\n\n\n\nCode\ns1222 &lt;- out %&gt;% filter(month(date) == 12 & year(date) == 2022) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#0808cf\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2022\"),size = 6)\n\ns423 &lt;- out %&gt;% filter(month(date) == 4 & year(date) == 2023) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Apr 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed097b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Apr 2023\" = \"#ed097b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Apr 2023\"),size = 6)\n\ns823 &lt;- out %&gt;% filter(month(date) == 8 & year(date) == 2023) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Aug 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed6b00\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Aug 2023\" = \"#ed6b00\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Aug 2023\"),size = 6)\n\ns1223 &lt;- out %&gt;% filter(month(date) == 12 & year(date) == 2023) %&gt;%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#33516b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2023\" = \"#33516b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  # geom_point(data= t1222, aes(x = age, m * pos + 1),\n  #            shape = \"|\",\n  #            col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2023\"),size = 6)\n\n\n\n\nCode\nresult_sero &lt;- s1222 | s423 | s823 | s1223\n\nresult_sero/\n  ts"
  },
  {
    "objectID": "sero.html#case",
    "href": "sero.html#case",
    "title": "2  HFMD Seroprevalence",
    "section": "3.2 Case",
    "text": "3.2 Case\n\n\nCode\ndf1 &lt;- read_excel(\"D:/OUCRU/hfmd/data/TCM_full.xlsx\", \n                  col_types = c(\"date\", \"numeric\", \"text\", \n                                \"text\", \"text\", \"date\", \"date\", \"date\", \n                                \"text\", \"text\", \"text\"))\ncolnames(df1) &lt;- c(\"dob\", \"age\", \"gender\", \"commune\", \"district\",\n                   \"reported_date\", \"onset_date\",\"adm_date\",\n                   \"medi_cen\",\"inout\",\"severity\")\ndf1$dob &lt;- df1$dob %&gt;% as_date()\ndf1$adm_date &lt;- df1$adm_date %&gt;% as_date()\n\ndf1$age1 &lt;- interval(df1$dob, df1$adm_date) / years(1)\ndf1$adm_week &lt;- as.Date(floor_date(df1$adm_date, \"week\"))\ndf1$district &lt;- df1$district %&gt;% str_replace_all(\n  c( \"Quận Gò vấp\"  = \"Quận Gò Vấp\"))\ndf1$district &lt;- df1$district %&gt;% \n  str_remove(\"Quận|Huyện|Thành phố\") %&gt;%\n  trimws(which = \"both\") \n\ndf_plot &lt;- df1 %&gt;% filter(year(adm_week) == \"2023\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;%\n  count(adm_week) %&gt;% as.data.frame()\n\nts &lt;- ggplot()+\n  geom_bar(data = df_plot, aes(x = as.Date(adm_week), y = n),stat = \"identity\",\n           alpha = 0.5) +\n  labs(x = \"Admission week\",\"Cases\")+\n  geom_vline(xintercept = as.Date(\"2022-12-01\"),\n             alpha = 0.4,col = \"#0808cf\")+\n  geom_vline(xintercept = as.Date(\"2022-12-30\"),\n             alpha = 0.4,col = \"#0808cf\")+\n  geom_vline(xintercept = as.Date(\"2023-04-01\"),\n             alpha = 0.4,col = \"#ed097b\")+\n  geom_vline(xintercept = as.Date(\"2023-04-30\"),\n             alpha = 0.4,col = \"#ed097b\")+\n  geom_vline(xintercept = as.Date(\"2023-08-01\"),\n             alpha = 0.4,col = \"#ed6b00\")+\n  geom_vline(xintercept = as.Date(\"2023-08-30\"),\n             alpha = 0.4,col = \"#ed6b00\")+\n  geom_vline(xintercept = as.Date(\"2023-12-01\"),\n             alpha = 0.4,col = \"#33516b\")+\n  geom_vline(xintercept = as.Date(\"2023-12-30\"),\n             alpha = 0.4,col = \"#33516b\")+\n  xlim(as.Date(\"2022-11-24\"),as.Date(\"2024-01-01\"))+theme_classic()"
  },
  {
    "objectID": "sero.html#glm-unconstrained",
    "href": "sero.html#glm-unconstrained",
    "title": "2  HFMD Seroprevalence",
    "section": "6.4 GLM (unconstrained)",
    "text": "6.4 GLM (unconstrained)\nModel\n\n\nCode\nmod1 &lt;- glm(pos ~ age * col_date +\n              I(age ^ 2) * col_date, binomial,\n            mutate(atdf, across(col_date, as.numeric)))\n\n\n\n\nCode\ndataset &lt;- mod1$data\n\ncollection_date_val &lt;- seq(min(dataset$col_date),\n                           max(dataset$col_date),le=20)\n\nnew_data &lt;- expand.grid(age = age_val, col_date = collection_date_val)\n\n\nprdcts &lt;- cbind(new_data, fit = 100 * predict(mod1, new_data, \"response\")) |&gt;\n  as_tibble() |&gt;\n  arrange(col_date) |&gt;\n  mutate(across(col_date, as_date))\n\n\n\n\nCode\nplot_ly(prdcts, x = ~sort(unique(col_date)),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit, 15),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n    ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HFMD 2023",
    "section": "",
    "text": "1 Epidemiological Analysis\nCode\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(gtsummary)\nlibrary(patchwork)\ninvisible(Sys.setlocale(\"LC_TIME\", \"English\"))\nCode\ndf1 &lt;- read_excel(\"D:/OUCRU/hfmd/data/TCM_full.xlsx\", \n    col_types = c(\"date\", \"numeric\", \"text\", \n        \"text\", \"text\", \"date\", \"date\", \"date\", \n        \"text\", \"text\", \"text\"))\ncolnames(df1) &lt;- c(\"dob\", \"age\", \"gender\", \"commune\", \"district\",\n                  \"reported_date\", \"onset_date\",\"adm_date\",\n                  \"medi_cen\",\"inout\",\"severity\")\ndf1$dob &lt;- df1$dob %&gt;% as_date()\ndf1$adm_date &lt;- df1$adm_date %&gt;% as_date()\n\ndf1$age1 &lt;- interval(df1$dob, df1$adm_date) / years(1)\ndf1$adm_week &lt;- as.Date(floor_date(df1$adm_date, \"week\"))\ndf1$district &lt;- df1$district %&gt;% str_replace_all(\n          c( \"Quận Gò vấp\"  = \"Quận Gò Vấp\"))\ndf1$district &lt;- df1$district %&gt;% \n  str_remove(\"Quận|Huyện|Thành phố\") %&gt;%\n  trimws(which = \"both\")"
  },
  {
    "objectID": "index.html#model-structure",
    "href": "index.html#model-structure",
    "title": "HFMD 2023",
    "section": "4.1 Model structure",
    "text": "4.1 Model structure\n\nage_mod &lt;- odin({\n  deriv(S1) &lt;- -(beta11*I1 + beta12*I2) * S1 + mu * S1\n  deriv(I1) &lt;- (beta11*I1 + beta12*I2) * S1 - gamma1*I1\n  deriv(R1) &lt;- gamma1 * I1\n\n  deriv(S2) &lt;- -(beta12*I1 + beta22*I2) * S2\n  deriv(I2) &lt;- (beta12*I1 + beta22*I2) * S2 - gamma2*I2\n  deriv(R2) &lt;- gamma2 * I2\n\n  initial(S1) &lt;- S1_init\n  initial(I1) &lt;- I1_init\n  initial(R1) &lt;- R1_init\n\n  initial(S2) &lt;- S2_init\n  initial(I2) &lt;- I2_init\n  initial(R2) &lt;- R2_init\n\n  beta11 &lt;- user(0.003)\n  beta12 &lt;- user(0.003)\n  # beta21 &lt;- user(0.003)\n  beta22 &lt;- user(0.003)\n\n  mu &lt;- user(0.5)\n\n  gamma1 &lt;- user(0.5)\n  gamma2 &lt;- user(0.5)\n\n  S1_init &lt;- user(0.8)\n  I1_init &lt;- user(0.2)\n  R1_init &lt;- user(0)\n\n  S2_init &lt;- user(0.6)\n  I2_init &lt;- user(0.4)\n  R2_init &lt;- user(0)\n})\n\n── R CMD INSTALL ───────────────────────────────────────────────────────────────\n* installing *source* package 'odin23cdddbb' ...\n** using staged installation\n** libs\nusing C compiler: 'gcc.exe (GCC) 13.2.0'\ngcc  -I\"C:/PROGRA~1/R/R-44~1.2/include\" -DNDEBUG     -I\"C:/rtools44/x86_64-w64-mingw32.static.posix/include\"     -O2 -Wall -gdwarf-2 -mfpmath=sse -msse2 -mstackrealign  -UNDEBUG -Wall -pedantic -g -O0 -c odin.c -o odin.o\nodin.c: In function 'odin_metadata':\nodin.c:168:18: warning: unused variable 'internal' [-Wunused-variable]\n  168 |   odin_internal *internal = odin_get_internal(internal_p, 1);\n      |                  ^~~~~~~~\nodin.c: In function 'user_get_scalar_int':\nodin.c:265:47: warning: format '%d' expects argument of type 'int', but argument 2 has type 'const char *' [-Wformat=]\n  265 |       Rf_error(\"Expected scalar integer for '%d'\", name);\n      |                                              ~^    ~~~~\n      |                                               |    |\n      |                                               int  const char *\n      |                                              %s\ngcc  -I\"C:/PROGRA~1/R/R-44~1.2/include\" -DNDEBUG     -I\"C:/rtools44/x86_64-w64-mingw32.static.posix/include\"     -O2 -Wall -gdwarf-2 -mfpmath=sse -msse2 -mstackrealign  -UNDEBUG -Wall -pedantic -g -O0 -c registration.c -o registration.o\ngcc -shared -static-libgcc -o odin23cdddbb.dll tmp.def odin.o registration.o -LC:/rtools44/x86_64-w64-mingw32.static.posix/lib/x64 -LC:/rtools44/x86_64-w64-mingw32.static.posix/lib -LC:/PROGRA~1/R/R-44~1.2/bin/x64 -lR\ninstalling to C:/Users/ASUS/AppData/Local/Temp/RtmpaQwxVR/devtools_install_705c1ba24a1c/00LOCK-file705c713a4d7/00new/odin23cdddbb/libs/x64\n* DONE (odin23cdddbb)\n\n\n\n\nCode\nmu0 = 0.5\ngamma1_0 = 5/30\ngamma2_0 = 5/30\n\nS1_0 = 0.4\nI1_0 = 0.6\nR1_0 = 0\n\nS2_0 = .5\nI2_0 = .5\nR2_0 = 0"
  },
  {
    "objectID": "index.html#likelihood",
    "href": "index.html#likelihood",
    "title": "HFMD 2023",
    "section": "4.2 Likelihood",
    "text": "4.2 Likelihood\n\n\nCode\nbinom_loglik &lt;- function(data,par,N=N1) {\n\n  sir_odin_run &lt;- age_mod$new(beta11 = par[1], beta12 = par[2],\n                              # beta21 = par[3],\n                              beta22 = par[3],\n                              mu = mu0,\n                              gamma1 = gamma1_0, gamma2 = gamma2_0,\n                              S1_init = S1_0, I1_init = I1_0, R1_init = R1_0,\n                              S2_init = S2_0, I2_init = I2_0, R2_init = R2_0)\n\n  times &lt;- seq(0, 52, by = 1)\n\n  sir_output &lt;- sir_odin_run$run(times)\n  sir_output &lt;- data.frame(sir_output) %&gt;% mutate(prev = I1/N1)\n  -sum(dbinom(x=data$n, size=N, prob=sir_output$prev[-1], log=TRUE))\n}\n\n\n\n\nCode\nbeta_mle &lt;- optim(par=c(beta11 = 0.1, beta12 = 0.1,\n                        # beta21 = 0.1,\n                        beta22 = 0.1),\n                  fn=binom_loglik,\n                  data=case,\n                  method=\"L-BFGS-B\",\n                  lower=0.1, upper=0.9)\n\nbeta_mle$par\n\n\n   beta11    beta12    beta22 \n0.1000000 0.6409961 0.1000000 \n\n\n\n\nCode\n## function to apply new parameters from optimization\nafter_cal &lt;- function(par){\n  age_run &lt;- age_mod$new(beta11 = par[1], beta12 = par[2],\n                         # beta21 = par[3],\n                         beta22 = par[3],\n                         mu = mu0,\n                         gamma1 = gamma1_0, gamma2 = gamma2_0,\n                         S1_init = S1_0, I1_init = I1_0, R1_init = R1_0,\n                         S2_init = S2_0, I2_init = I2_0, R2_init = R2_0)\n\n  times &lt;- seq(1:52)\n\n  out_mod &lt;- data.frame(age_run$run(times)) %&gt;% mutate(prev=I1/N1)\n  return(out_mod)\n}\n\n\n\n\nCode\niii &lt;- after_cal(beta_mle$par) %&gt;% mutate(ca = case$n[-53]/N1)\n\n\nggplot(iii) +\n  geom_line(aes(x = t,y=prev*250))+\n  geom_point(aes(x = t,y=ca))"
  },
  {
    "objectID": "sero.html#fit-by-gam",
    "href": "sero.html#fit-by-gam",
    "title": "2  HFMD Seroprevalence",
    "section": "5.2 Fit by GAM",
    "text": "5.2 Fit by GAM\n\n\nCode\n## \npredictg &lt;- function(x, ci = .95, le = 512, m = 100) {\n  p &lt;- (1 - ci) / 2\n  \n  link_inv &lt;- x$family$linkinv\n  dataset &lt;- x$model\n  n &lt;- nrow(dataset) - length(x$coefficients)\n  age_range &lt;- range(dataset$age)\n  \n  ages &lt;- seq(age_range[1], age_range[2], le = le)\n  \n  x |&gt;\n    predict(data.frame(age = ages), se.fit = TRUE) |&gt;\n    extract(c(\"fit\", \"se.fit\")) %&gt;%\n    c(age = list(ages), .) |&gt;\n    as_tibble() |&gt;\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |&gt;\n    select(- se.fit)\n}\n\n## plot\n\nplot_gam &lt;- function(x,date){\n  \n  clo &lt;- case_when(date == 1222 ~ \"Dec 2022\",\n                   date == 423 ~ \"Apr 2023\",\n                   date == 823 ~ \"Aug 2023\",\n                   date == 1223 ~ \"Dec 2023\")\n  clo2 &lt;- case_when(date == 1222 ~ \"#0808cf\",\n                    date == 423 ~ \"#ed097b\",\n                    date == 823 ~ \"#ed6b00\",\n                    date == 1223 ~ \"#33516b\")\n  \n  dtaa &lt;- case_when(date == 1222 ~ t1222,\n                    date == 423 ~ t423,\n                    date == 823 ~ t823,\n                    date == 1223 ~ t1223)\n  \n  x %&gt;% as.data.frame() %&gt;%\n    ggplot(aes(x = age,y = fit))+\n    geom_line(aes(col = clo))+\n    geom_ribbon(aes(x = age,y = fit,\n                    ymin=lwr, ymax=upr),alpha = 0.5,fill = clo2)+\n    ylim(0,101)+\n    theme_minimal() +\n  scale_color_manual(name = \"Y series\",\n                     values = c(clo = clo2))+\n    labs(y = \"Seroprevalence (%)\")+\n    geom_point(data= dtaa, aes(x = age, m * pos + 1),\n               shape = \"|\",\n               col = clo2)+\n    theme(\n      axis.text.x = element_text(size = 15),\n      axis.text.y = element_text(size = 15),\n      legend.position = \"hide\",\n      legend.text = element_text(size = 15),\n      axis.title.x = element_text(size = 15),\n      axis.title.y = element_text(size = 15))+\n    annotate(\"text\", x = 3, y = 90, label = c(clo),size = 6) \n}  \n\ng1222 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t1222) %&gt;% \n  predictg() %&gt;% plot_gam(date = 1222)  \n\ng423 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t423) %&gt;% \n  predictg() %&gt;% plot_gam(date = 423)  \n\ng823 &lt;-gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t823) %&gt;% \n  predictg() %&gt;% plot_gam(date = 823)  \n\ng1223 &lt;-gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t1223) %&gt;% \n  predictg() %&gt;% plot_gam(date = 1223)  \n\n\n\n\nCode\ng1222 | g423 | g823 | g1223"
  },
  {
    "objectID": "sero.html#serology-data",
    "href": "sero.html#serology-data",
    "title": "2  HFMD Seroprevalence",
    "section": "3.1 Serology data",
    "text": "3.1 Serology data\n\n\nCode\napr_2023 &lt;- read_excel(\"D:/OUCRU/hfmd/data/4_2023.xlsx\")\naug_2023 &lt;- read_excel(\"D:/OUCRU/hfmd/data/08_2023.xlsx\")\ndec_2022 &lt;- read_excel(\"D:/OUCRU/hfmd/data/12_2022.xls\")\ndec_2023 &lt;- read_excel(\"D:/OUCRU/hfmd/data/12_2023.xlsx\")\n\nt423 &lt;- data.frame(apr_2023[-c(1,2),10:14])\nt423$pos &lt;- replace(t423$...14,is.na(t423$...14),0) %&gt;%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t423) &lt;- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt423$age &lt;- as.numeric(t423$age)\n\n\nt823 &lt;- data.frame(aug_2023[-c(1,2),c(9,14:17)])\nt823$pos &lt;- str_detect(t823$...17,regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t823) &lt;- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt823$age &lt;- as.numeric(t823$age)\n\n\nt1222 &lt;- data.frame(dec_2022[-c(1,2),10:14])\nt1222$pos &lt;- replace(t1222$...14,is.na(t1222$...14),0) %&gt;%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t1222) &lt;- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt1222$age &lt;- as.numeric(t1222$age)\n\n\nt1223 &lt;- data.frame(dec_2023[-c(1,2),c(9,14:17)])\nt1223$pos &lt;- replace(t1223$...17,is.na(t1223$...17),0) %&gt;%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %&gt;%\n  as.integer(as.logical())\ncolnames(t1223) &lt;- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt1223$age &lt;- as.numeric(t1223$age)"
  },
  {
    "objectID": "sero.html#constrain-in-each-time-point",
    "href": "sero.html#constrain-in-each-time-point",
    "title": "2  HFMD Seroprevalence",
    "section": "5.3 Constrain in each time point",
    "text": "5.3 Constrain in each time point\n\n\nCode\n## Constrain function\ncontrain &lt;- function(data1,data2){\n  new_data &lt;- data.frame(age = data2$age,\n                         fit = rep(0,nrow(data2)),\n                         lwr = rep(0,nrow(data2)),\n                         up = rep(0,nrow(data2)))\n  for (i in 1:512){\n    if(data2$fit[i] &lt; data1$fit[i]){\n      new_data$fit[i] &lt;- data1$fit[i]\n      new_data$lwr[i] &lt;- data1$lwr[i]\n      new_data$upr[i] &lt;- data1$upr[i]\n    } else{\n      new_data$fit[i] &lt;- data2$fit[i]\n      new_data$lwr[i] &lt;- data2$lwr[i]\n      new_data$upr[i] &lt;- data2$upr[i]\n    }\n  }\n  \n  new_data$fit &lt;- gam(fit ~ s(age),data = new_data)$fitted.values\n  new_data$lwr &lt;- gam(lwr ~ s(age),data = new_data)$fitted.values\n  new_data$upr &lt;- gam(upr ~ s(age),data = new_data)$fitted.values\n  \n  return(new_data)\n}\n\ntes1222 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t1222) %&gt;% \n  predictg() \ntes0423 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n    family = \"binomial\",data = t423) %&gt;% \n  predictg() \ntes0823 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n               family = \"binomial\",data = t823) %&gt;% \n  predictg() \ntes1223 &lt;- gam(pos~s(age,bs = \"bs\"),method = \"REML\",\n               family = \"binomial\",data = t1223) %&gt;% \n  predictg() \n\n## contrain \ncon423 &lt;- contrain(tes1222,tes0423)\ncon823 &lt;- contrain(con423,tes0823)\ncon1223 &lt;- contrain(con823,tes1223)\n\n\nc423 &lt;- con423 %&gt;% plot_gam(date = 423) \nc823 &lt;- con823 %&gt;% plot_gam(date = 823) \nc1223 &lt;- con1223 %&gt;% plot_gam(date = 1223) \n\n\n\n\nCode\ngam_contrain &lt;- g1222 | c423 | c823 | c1223\n\ngam_contrain/\n  ts"
  },
  {
    "objectID": "sero.html#glm-with-pava-algorithm",
    "href": "sero.html#glm-with-pava-algorithm",
    "title": "2  HFMD Seroprevalence",
    "section": "6.4 GLM with PAVA algorithm",
    "text": "6.4 GLM with PAVA algorithm\nIn chapter 9 of 2012 serobook, there are an argument that following Friedman and Tibshirani (1984) and Mammen et al. (2001), Shkedy et al. (2003) suggested to estimate π(a) and λ(a) using local polynomials and smoothing splines and, if necessary, a posteriori apply the PAVA to isotonize the resulting estimate.\nWithout loss of generality they assume \\(\\pi(a_{1}) \\leq \\pi(a_{2}) \\leq ...\\leq \\pi(a_{i})\\). The PAVA states that if \\(\\pi(a_{i}) \\leq \\pi(a_{i - 1})\\) these values need to be “pooled.” In other words \\(\\hat{\\pi}(a_{i})\\) and \\(\\hat{\\pi}(a_{i-1})\\) are both replaced by\n\\[\\frac{\\hat{\\pi}(a_{i})+\\hat{\\pi}(a_{i-1})}{2}\\]\nIn my case, I fitted the glm to seropositive by age and time, then applied PAVA for fitted seroprevalence and 95% CI of each age group.\n\n   PAVA algorithm \n\npavit &lt;- function(pos=pos,tot=rep(1,length(pos))){\n  gi&lt;- pos/tot\n  pai1 &lt;- pai2 &lt;- gi\n  N &lt;- length(pai1)\n  ni&lt;-tot\n  for(i in 1:(N - 1)) {\n    if(pai2[i] &gt; pai2[i + 1]) {\n      pool &lt;- (ni[i]*pai1[i] + ni[i+1]*pai1[i + 1])/(ni[i]+ni[i+1])\n      pai2[i:(i + 1)] &lt;- pool\n      k &lt;- i + 1\n      for(j in (k - 1):1) {\n        if(pai2[j] &gt; pai2[k]) {\n          pool.2 &lt;- sum(ni[j:k]*pai1[j:k])/(sum(ni[j:k]))\n          pai2[j:k] &lt;- pool.2\n        }\n      }\n    }\n  }\n  return(list(pai1=pai1,pai2=pai2))\n}\n\n\n\n   Model \n\nmod1 &lt;- glm(pos ~ age * col_date + I(age ^ 2) * col_date +\n              I(age ^ 3) * col_date + I(age ^ 4) * col_date, binomial,\n            mutate(atdf, across(col_date, as.numeric)))\n\n\n\n\nCode\ndataset &lt;- mod1$data\nage_val &lt;- c(.1,1:15)\ncollection_date_val &lt;- seq(min(dataset$col_date),\n                           max(dataset$col_date),le=512)\n\nnew_data &lt;- expand.grid(age = age_val, col_date = collection_date_val)\n\nprdcts &lt;- cbind(new_data,predict(mod1, new_data,type = \"link\",se.fit = TRUE) |&gt; as.data.frame()) %&gt;%  \n  select(-c(\"residual.scale\")) %&gt;% \n  mutate(fit2 = mod1$family$linkinv(fit),\n         lwr = mod1$family$linkinv(fit - 1.96*se.fit),\n         upr = mod1$family$linkinv(fit + 1.96*se.fit))|&gt;\n  arrange(col_date) |&gt;\n  mutate(across(col_date, as_date))\n\n\n\n6.4.1 Unconstrained plot\n\n\nCode\nplot_ly(prdcts, x = ~sort(unique(col_date)),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit2*100, 16),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)\n\n\n\n\n\n\n\n\n6.4.2 Applying PAVA algorithm\n\n\nCode\ndf_c &lt;- data.frame()\nfor (i in 1:length(age_val)){\n  pred &lt;- prdcts %&gt;% filter(age == age_val[i])\n  pred$fitc &lt;- pavit(as.numeric(pred$fit2))$pai2*100\n  pred$l_fitc &lt;- pavit(as.numeric(pred$lwr))$pai2*100\n  pred$u_fitc &lt;- pavit(as.numeric(pred$upr))$pai2*100\n  df_c &lt;- rbind(df_c,pred)\n}\n\ndf_c &lt;- df_c[order(as.Date(df_c$col_date, format=\"%m/%d/%Y\")),]\n\n\n\n\nCode\nplot_ly(df_c, x = ~sort(unique(col_date)),\n        y = ~sort(unique(age)),\n        z = ~matrix(fitc, 16),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)\n\n\n\n\n\n\n\n   smooth_plot function \n\nsmooth_plot &lt;- function(data,month,year){\n  \n  clo &lt;- case_when(year == 2022 & month == 12 ~ \"Dec 2022\",\n                   year == 2023 & month == 4 ~ \"Apr 2023\",\n                   year == 2023 & month == 8 ~ \"Aug 2023\",\n                   year == 2023 & month == 12 ~ \"Dec 2023\")\n  \n  clo2 &lt;- case_when(year == 2022 & month == 12 ~ \"#0808cf\",\n                    year == 2023 & month == 4 ~ \"#ed097b\",\n                    year == 2023 & month == 8 ~ \"#ed6b00\",\n                    year == 2023 & month == 12 ~ \"#33516b\")\n  \n  dtaa &lt;- case_when(year == 2022 & month == 12 ~ t1222,\n                    year == 2023 & month == 4 ~ t423,\n                    year == 2023 & month == 8 ~ t823,\n                    year == 2023 & month == 12 ~ t1223)\n  \n  ccc &lt;- data %&gt;% filter(year(col_date) == year & \n                           month(col_date) == month) %&gt;% \n          select(c(\"age\",\"fitc\",\"l_fitc\",\"u_fitc\"))\n  \n  ss &lt;- ccc %&gt;% mutate(age2 = ksmooth(ccc$age ,ccc$fitc ,kernel=\"normal\",bandwidth=2)$x,\n                 fit2c = ksmooth(ccc$age ,ccc$fitc ,kernel=\"normal\",bandwidth=2)$y,\n                 uprc = ksmooth(ccc$age ,ccc$u_fitc ,kernel=\"normal\",bandwidth=2)$y,\n                 lwrc = ksmooth(ccc$age ,ccc$l_fitc ,kernel=\"normal\",bandwidth=2)$y)\n    \n  ss %&gt;%  \n    ggplot(aes(x = age2,y = fit2c))+\n    geom_line(aes(col = clo))+\n    geom_ribbon(aes(x = age2,y = fit2c,\n                    ymin=lwrc, ymax=uprc),alpha = 0.5,fill = clo2)+\n    ylim(0,101)+\n    theme_minimal() +\n    scale_color_manual(name = \"Y series\",\n                       values = c(clo = clo2))+\n    labs(y = \"Seroprevalence (%)\",x = \"Age\")+\n    geom_point(data= dtaa, aes(x = age, m * pos + 1),\n               shape = \"|\",\n               col = clo2)+\n    theme(\n      axis.text.x = element_text(size = 15),\n      axis.text.y = element_text(size = 15),\n      legend.position = \"hide\",\n      legend.text = element_text(size = 15),\n      axis.title.x = element_text(size = 15),\n      axis.title.y = element_text(size = 15))+\n    annotate(\"text\", x = 3, y = 90, label = c(clo),size = 6)  \n}\n\n\n\n\nCode\np1222 &lt;- smooth_plot(data = df_c,month = 12,year = 2022)\np423 &lt;- smooth_plot(data = df_c,month = 4,year = 2023)\np823 &lt;- smooth_plot(data = df_c,month = 8,year = 2023)\np1223 &lt;- smooth_plot(data = df_c,month = 12,year = 2023)\n\nresult_sero2 &lt;- p1222 | p423 | p823 | p1223\n\nresult_sero2/\n  ts"
  },
  {
    "objectID": "sero.html#unconstrained-plot",
    "href": "sero.html#unconstrained-plot",
    "title": "2  HFMD Seroprevalence",
    "section": "6.5 Unconstrained plot",
    "text": "6.5 Unconstrained plot\n\n\nCode\nplot_ly(prdcts, x = ~sort(unique(col_date)),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit2*100, 16),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)"
  },
  {
    "objectID": "sero.html#applying-pava-algorithm",
    "href": "sero.html#applying-pava-algorithm",
    "title": "2  HFMD Seroprevalence",
    "section": "6.6 Applying PAVA algorithm",
    "text": "6.6 Applying PAVA algorithm\n\n\nCode\ndf_c &lt;- data.frame()\nfor (i in 1:length(age_val)){\n  pred &lt;- prdcts %&gt;% filter(age == age_val[i])\n  pred$fitc &lt;- pavit(as.numeric(pred$fit2))$pai2*100\n  pred$l_fitc &lt;- pavit(as.numeric(pred$lwr))$pai2*100\n  pred$u_fitc &lt;- pavit(as.numeric(pred$upr))$pai2*100\n  df_c &lt;- rbind(df_c,pred)\n}\n\ndf_c &lt;- df_c[order(as.Date(df_c$col_date, format=\"%m/%d/%Y\")),]\n\n\n\n\nCode\nplot_ly(df_c, x = ~sort(unique(col_date)),\n        y = ~sort(unique(age)),\n        z = ~matrix(fitc, 16),\n        showscale = F) %&gt;%\n  add_surface()%&gt;%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  ))%&gt;% layout(autosize = F, width = 890, height = 1000, margin = m)\n\n\n\n\n\n\n\n   smooth_plot function \n\nsmooth_plot &lt;- function(data,month,year){\n  \n  clo &lt;- case_when(year == 2022 & month == 12 ~ \"Dec 2022\",\n                   year == 2023 & month == 4 ~ \"Apr 2023\",\n                   year == 2023 & month == 8 ~ \"Aug 2023\",\n                   year == 2023 & month == 12 ~ \"Dec 2023\")\n  \n  clo2 &lt;- case_when(year == 2022 & month == 12 ~ \"#0808cf\",\n                    year == 2023 & month == 4 ~ \"#ed097b\",\n                    year == 2023 & month == 8 ~ \"#ed6b00\",\n                    year == 2023 & month == 12 ~ \"#33516b\")\n  \n  dtaa &lt;- case_when(year == 2022 & month == 12 ~ t1222,\n                    year == 2023 & month == 4 ~ t423,\n                    year == 2023 & month == 8 ~ t823,\n                    year == 2023 & month == 12 ~ t1223)\n  \n  ccc &lt;- data %&gt;% filter(year(col_date) == year & \n                           month(col_date) == month) %&gt;% \n          select(c(\"age\",\"fitc\",\"l_fitc\",\"u_fitc\"))\n  \n  ss &lt;- ccc %&gt;% mutate(age2 = ksmooth(ccc$age ,ccc$fitc ,kernel=\"normal\",bandwidth=2)$x,\n                 fit2c = ksmooth(ccc$age ,ccc$fitc ,kernel=\"normal\",bandwidth=2)$y,\n                 uprc = ksmooth(ccc$age ,ccc$u_fitc ,kernel=\"normal\",bandwidth=2)$y,\n                 lwrc = ksmooth(ccc$age ,ccc$l_fitc ,kernel=\"normal\",bandwidth=2)$y)\n    \n  ss %&gt;%  \n    ggplot(aes(x = age2,y = fit2c))+\n    geom_line(aes(col = clo))+\n    geom_ribbon(aes(x = age2,y = fit2c,\n                    ymin=lwrc, ymax=uprc),alpha = 0.5,fill = clo2)+\n    ylim(0,101)+\n    theme_minimal() +\n    scale_color_manual(name = \"Y series\",\n                       values = c(clo = clo2))+\n    labs(y = \"Seroprevalence (%)\",x = \"Age\")+\n    geom_point(data= dtaa, aes(x = age, m * pos + 1),\n               shape = \"|\",\n               col = clo2)+\n    theme(\n      axis.text.x = element_text(size = 15),\n      axis.text.y = element_text(size = 15),\n      legend.position = \"hide\",\n      legend.text = element_text(size = 15),\n      axis.title.x = element_text(size = 15),\n      axis.title.y = element_text(size = 15))+\n    annotate(\"text\", x = 3, y = 90, label = c(clo),size = 6)  \n}\n\n\n\n\nCode\np1222 &lt;- smooth_plot(data = df_c,month = 12,year = 2022)\np423 &lt;- smooth_plot(data = df_c,month = 4,year = 2023)\np823 &lt;- smooth_plot(data = df_c,month = 8,year = 2023)\np1223 &lt;- smooth_plot(data = df_c,month = 12,year = 2023)\n\nresult_sero2 &lt;- p1222 | p423 | p823 | p1223\n\nresult_sero2/\n  ts"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "3  Age specific model",
    "section": "",
    "text": "4 Case notification\nCode\ndf1 &lt;- read_excel(\"D:/OUCRU/hfmd/data/TCM_full.xlsx\",\n                  col_types = c(\"date\", \"numeric\", \"text\",\n                                \"text\", \"text\", \"date\", \"date\", \"date\",\n                                \"text\", \"text\", \"text\"))\ncolnames(df1) &lt;- c(\"dob\", \"age\", \"gender\", \"commune\", \"district\",\n                   \"reported_date\", \"onset_date\",\"adm_date\",\n                   \"medi_cen\",\"inout\",\"severity\")\ndf1$dob &lt;- df1$dob %&gt;% as_date()\ndf1$adm_date &lt;- df1$adm_date %&gt;% as_date()\n\ndf1$age1 &lt;- interval(df1$dob, df1$adm_date) / years(1)\ndf1$adm_week &lt;- as.Date(floor_date(df1$adm_date, \"week\"))\ndf1$district &lt;- df1$district %&gt;% str_replace_all(\n  c( \"Quận Gò vấp\"  = \"Quận Gò Vấp\"))\ndf1$district &lt;- df1$district %&gt;%\n  str_remove(\"Quận|Huyện|Thành phố\") %&gt;%\n  trimws(which = \"both\")\n\ncase &lt;- df1 %&gt;% filter(year(adm_date) == 2023 ) %&gt;%\n        group_by(adm_week) %&gt;%\n        count()\ncase$t &lt;- 1:nrow(case)\nCode\ncensus2019 &lt;- readRDS(\"D:/OUCRU/hfmd/data/census2019.rds\")\n\npophcm &lt;- census2019 %&gt;% filter(province == \"Thành phố Hồ Chí Minh\") %&gt;%\n  group_by(age) %&gt;% summarise(n = sum(n))\n\npophcm$agee &lt;- as.numeric(word(pophcm$age,1))\npop1 &lt;- pophcm %&gt;% filter(agee &lt;= 6)\nN1 &lt;- sum(pop1$n)\nCode\ncase2 &lt;- df1 %&gt;%\n  group_by(adm_week) %&gt;%\n  count()\n\ncase2 %&gt;% ggplot(aes(x = adm_week,y = n )) +\n  geom_line()+\n  geom_vline(xintercept = as.Date(\"2014-05-31\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2014-08-01\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2015-05-31\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2015-08-01\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2016-05-27\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2016-08-15\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2017-05-31\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2017-08-14\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2018-05-31\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2018-08-20\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2019-05-25\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2019-09-05\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2020-07-31\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2020-09-01\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2021-05-31\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2021-09-05\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2022-06-30\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2022-09-05\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2023-05-26\"),\n             alpha = 0.4)+\n  geom_vline(xintercept = as.Date(\"2023-08-21\"),\n             alpha = 0.4)+\n  scale_x_date(breaks = \"1 year\",date_labels = \"%Y\")+\n  labs(x = \"Admission week\",y = \"Number of cases\")+\n  theme_minimal()"
  },
  {
    "objectID": "model.html#model-structure",
    "href": "model.html#model-structure",
    "title": "3  Age specific model",
    "section": "6.1 Model structure",
    "text": "6.1 Model structure\n\nage_mod &lt;- odin({\n  deriv(S1) &lt;- -(beta11*I1 + beta12*I2) * S1 + mu * S1\n  deriv(I1) &lt;- (beta11*I1 + beta12*I2) * S1 - gamma1*I1\n  deriv(R1) &lt;- gamma1 * I1\n\n  deriv(S2) &lt;- -(beta12*I1 + beta22*I2) * S2\n  deriv(I2) &lt;- (beta12*I1 + beta22*I2) * S2 - gamma2*I2\n  deriv(R2) &lt;- gamma2 * I2\n\n  initial(S1) &lt;- S1_init\n  initial(I1) &lt;- I1_init\n  initial(R1) &lt;- R1_init\n\n  initial(S2) &lt;- S2_init\n  initial(I2) &lt;- I2_init\n  initial(R2) &lt;- R2_init\n\n  beta11 &lt;- user(0.003)\n  beta12 &lt;- user(0.003)\n  # beta21 &lt;- user(0.003)\n  beta22 &lt;- user(0.003)\n\n  mu &lt;- user(0.5)\n\n  gamma1 &lt;- user(0.5)\n  gamma2 &lt;- user(0.5)\n\n  S1_init &lt;- user(0.8)\n  I1_init &lt;- user(0.2)\n  R1_init &lt;- user(0)\n\n  S2_init &lt;- user(0.6)\n  I2_init &lt;- user(0.4)\n  R2_init &lt;- user(0)\n})\n\n── R CMD INSTALL ───────────────────────────────────────────────────────────────\n* installing *source* package 'odin23cdddbb' ...\n** using staged installation\n** libs\nusing C compiler: 'gcc.exe (GCC) 13.2.0'\ngcc  -I\"C:/PROGRA~1/R/R-44~1.2/include\" -DNDEBUG     -I\"C:/rtools44/x86_64-w64-mingw32.static.posix/include\"     -O2 -Wall -gdwarf-2 -mfpmath=sse -msse2 -mstackrealign  -UNDEBUG -Wall -pedantic -g -O0 -c odin.c -o odin.o\nodin.c: In function 'odin_metadata':\nodin.c:168:18: warning: unused variable 'internal' [-Wunused-variable]\n  168 |   odin_internal *internal = odin_get_internal(internal_p, 1);\n      |                  ^~~~~~~~\nodin.c: In function 'user_get_scalar_int':\nodin.c:265:47: warning: format '%d' expects argument of type 'int', but argument 2 has type 'const char *' [-Wformat=]\n  265 |       Rf_error(\"Expected scalar integer for '%d'\", name);\n      |                                              ~^    ~~~~\n      |                                               |    |\n      |                                               int  const char *\n      |                                              %s\ngcc  -I\"C:/PROGRA~1/R/R-44~1.2/include\" -DNDEBUG     -I\"C:/rtools44/x86_64-w64-mingw32.static.posix/include\"     -O2 -Wall -gdwarf-2 -mfpmath=sse -msse2 -mstackrealign  -UNDEBUG -Wall -pedantic -g -O0 -c registration.c -o registration.o\ngcc -shared -static-libgcc -o odin23cdddbb.dll tmp.def odin.o registration.o -LC:/rtools44/x86_64-w64-mingw32.static.posix/lib/x64 -LC:/rtools44/x86_64-w64-mingw32.static.posix/lib -LC:/PROGRA~1/R/R-44~1.2/bin/x64 -lR\ninstalling to C:/Users/ASUS/AppData/Local/Temp/RtmpErIwjN/devtools_install_5e0463c31584/00LOCK-file5e0452b361e0/00new/odin23cdddbb/libs/x64\n* DONE (odin23cdddbb)\n\n\n\n\nCode\nmu0 = 0.5\ngamma1_0 = 5/30\ngamma2_0 = 5/30\n\nS1_0 = 0.4\nI1_0 = 0.6\nR1_0 = 0\n\nS2_0 = .5\nI2_0 = .5\nR2_0 = 0"
  },
  {
    "objectID": "model.html#likelihood",
    "href": "model.html#likelihood",
    "title": "3  Age specific model",
    "section": "6.2 Likelihood",
    "text": "6.2 Likelihood\n\n\nCode\nbinom_loglik &lt;- function(data,par,N=N1) {\n\n  sir_odin_run &lt;- age_mod$new(beta11 = par[1], beta12 = par[2],\n                              # beta21 = par[3],\n                              beta22 = par[3],\n                              mu = mu0,\n                              gamma1 = gamma1_0, gamma2 = gamma2_0,\n                              S1_init = S1_0, I1_init = I1_0, R1_init = R1_0,\n                              S2_init = S2_0, I2_init = I2_0, R2_init = R2_0)\n\n  times &lt;- seq(0, 52, by = 1)\n\n  sir_output &lt;- sir_odin_run$run(times)\n  sir_output &lt;- data.frame(sir_output) %&gt;% mutate(prev = I1/N1)\n  -sum(dbinom(x=data$n, size=N, prob=sir_output$prev[-1], log=TRUE))\n}\n\n\n\n\nCode\nbeta_mle &lt;- optim(par=c(beta11 = 0.1, beta12 = 0.1,\n                        # beta21 = 0.1,\n                        beta22 = 0.1),\n                  fn=binom_loglik,\n                  data=case,\n                  method=\"L-BFGS-B\",\n                  lower=0.1, upper=0.9)\n\nbeta_mle$par\n\n\n   beta11    beta12    beta22 \n0.1000000 0.6409961 0.1000000 \n\n\n\n\nCode\n## function to apply new parameters from optimization\nafter_cal &lt;- function(par){\n  age_run &lt;- age_mod$new(beta11 = par[1], beta12 = par[2],\n                         # beta21 = par[3],\n                         beta22 = par[3],\n                         mu = mu0,\n                         gamma1 = gamma1_0, gamma2 = gamma2_0,\n                         S1_init = S1_0, I1_init = I1_0, R1_init = R1_0,\n                         S2_init = S2_0, I2_init = I2_0, R2_init = R2_0)\n\n  times &lt;- seq(1:52)\n\n  out_mod &lt;- data.frame(age_run$run(times)) %&gt;% mutate(prev=I1/N1)\n  return(out_mod)\n}\n\n\n\n\nCode\niii &lt;- after_cal(beta_mle$par) %&gt;% mutate(ca = case$n[-53]/N1)\n\n\nggplot(iii) +\n  geom_line(aes(x = t,y=prev*250))+\n  geom_point(aes(x = t,y=ca))"
  },
  {
    "objectID": "index.html#data-description",
    "href": "index.html#data-description",
    "title": "HFMD 2023",
    "section": "1.1 Data description",
    "text": "1.1 Data description\n\n\nCode\ndf1$gender &lt;- df1$gender %&gt;% str_replace_all(\n  c( \"nam|NAM|Nam\"  = \"Male\",\n     \"nữ|NỮ|Nữ\"  = \"Female\"))\n\ndf1$inout &lt;- df1$inout %&gt;% str_replace_all(\n  c( \"Chuyển viện\"  = \"Transfer\",\n     \"Điều trị nội trú\"  = \"Inpatient\",\n     \"Điều trị ngoại trú\"  = \"Outpatient\",\n     \"Ra viện\" = \"Discharge\",\n     \"Tình trạng khác\" = \"Others\",\n     \"Tử vong\" = \"Death\"\n     ))\n\ndf1 %&gt;% mutate(year = year(adm_date)) %&gt;% \n  tbl_summary(by = year,\n              label = c(age1 ~ \"Age\",\n                        gender ~ \"Gender\"),\n              statistic = list(\n                age1 ~ \"{median} ({p5}, {p95})\",\n                c(gender) ~ c( \"{n} ({p}%)\")\n              ),\n              missing = \"no\",\n              include = c(age1,gender))  %&gt;%\n  bold_labels()\n\n\n\n\n\n\n  \n    \n      Characteristic\n      2013\nN = 8,0781\n      2014\nN = 10,0431\n      2015\nN = 8,7291\n      2016\nN = 5,7401\n      2017\nN = 30,8251\n      2018\nN = 39,3521\n      2019\nN = 28,4861\n      2020\nN = 16,3981\n      2021\nN = 9,7721\n      2022\nN = 19,1651\n      2023\nN = 43,3801\n      2024\nN = 7,3971\n    \n  \n  \n    Age\nNA (NA, NA)\nNA (NA, NA)\nNA (NA, NA)\nNA (NA, NA)\n1.84 (0.69, 5.06)\n1.95 (0.69, 5.68)\n1.85 (0.66, 5.44)\n1.83 (0.71, 5.02)\n2.21 (0.74, 5.45)\n2.25 (0.78, 5.50)\n2.54 (0.79, 6.04)\n2.35 (0.69, 5.95)\n    Gender\n\n\n\n\n\n\n\n\n\n\n\n\n        Female\n3,159 (39%)\n4,070 (41%)\n3,617 (41%)\n2,391 (42%)\n12,982 (42%)\n16,815 (43%)\n12,196 (43%)\n6,944 (42%)\n4,123 (42%)\n7,950 (41%)\n18,461 (43%)\n3,121 (42%)\n        Male\n4,919 (61%)\n5,973 (59%)\n5,112 (59%)\n3,349 (58%)\n17,843 (58%)\n22,537 (57%)\n16,290 (57%)\n9,454 (58%)\n5,649 (58%)\n11,215 (59%)\n24,919 (57%)\n4,276 (58%)\n  \n  \n  \n    \n      1 Median (5% Centile, 95% Centile); n (%)"
  },
  {
    "objectID": "index.html#location",
    "href": "index.html#location",
    "title": "HFMD 2023",
    "section": "1.2 Location",
    "text": "1.2 Location\n\n\nCode\nspa_df &lt;- df1[,c(\"district\",\"adm_date\",\"adm_week\")] %&gt;% na.omit()\n\nspa_df$day &lt;- day(spa_df$adm_date)\nspa_df$month &lt;- month(spa_df$adm_date)\nspa_df$year &lt;- year(spa_df$adm_date)\n\nqhage &lt;- spa_df %&gt;% \n  filter(year == 2023) %&gt;% group_by(year,month,day) %&gt;%\n  count(district) %&gt;% \n  mutate(datetime = lubridate::make_datetime(2023, month,day)) %&gt;% \n  ggplot(aes(x = datetime, y = n)) + geom_line() +\n  scale_x_datetime(breaks = lubridate::make_datetime(2023,1:12),labels = month.abb)+\n  facet_wrap(~district,\n             ncol = 5)+\n  theme_bw()+\n  xlab(\"Addmission date (day)\")+\n  ylab(\"Cases\")+\n  ylim(0,50)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size = 10),\n        axis.text.y = element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_text(size = 15),\n        strip.text.x = element_text(size = 15))\n\n\n\n\nCode\nqhage"
  },
  {
    "objectID": "index.html#age-structure",
    "href": "index.html#age-structure",
    "title": "HFMD 2023",
    "section": "1.3 Age structure",
    "text": "1.3 Age structure\n\n\nCode\ndf23 &lt;- df1 %&gt;% filter(year(adm_date) == \"2023\") %&gt;%\n  filter(!is.na(adm_date) & !is.na(dob)) \n\n# df23 &lt;- df23[,c(\"adm_date\",\"age1\")]\n\ndf23 &lt;- df23[,c(\"adm_week\",\"age1\")]\n\ndf23$agr &lt;- cut(df23$age1, breaks = c(0, 1, 2, 3, 4,5,6,Inf), right = F)\ndf23$agr &lt;- factor(df23$agr, labels = c(\"[0-1)\", \"[1-2)\", \"[2-3)\",\n                                        \"[3-4)\",\"[4-5)\",\"[5-6)\",\"6+\"))\n\n\n\n\nCode\ndf23 |&gt; \n  filter(!is.na(adm_week), !is.na(agr)) |&gt; \n  count(adm_week, agr) |&gt; \n  group_by(adm_week) |&gt; \n  mutate(prop = n / sum(n)) |&gt; \n  data.frame() %&gt;% \n  ggplot(aes(x = adm_week,y=prop)) +\n  geom_bar(stat = \"identity\")+\n  facet_wrap(vars(agr))+\n  theme_bw()+\n  labs(x = \"Admission week\",y= \"Percentage (%)\")+\n  theme(axis.text.x = element_text(size = 6),\n        axis.text.y = element_text(size = 6),\n        axis.title.x = element_text(size = 6),\n        axis.title.y = element_text(size = 6))\n\n\n\n\n\n\n\nCode\n## sliding window function\nslide_age &lt;- function(time1,age1,w1,s1){\n  df1 &lt;- data.frame(time1,age1) %&gt;%                   ## line listing data frame\n    filter(!is.na(time1) & !is.na(age1)) %&gt;%\n    arrange(time1)\n\n  a_df1 &lt;- df1 %&gt;% count(time1)                      ## aggregate data frame\n\n  total1 &lt;- nrow(a_df1)\n  spots1 &lt;- seq(from = 1, to = (total1 - w1 + 1), by = s1)\n\n  out_total &lt;- data.frame()\n\n  for (i in 1:length(spots1)){\n    range1 &lt;- data.frame(a_df1[spots1[i]:(spots1[i] + w1 - 1),1])\n    result1 &lt;- df1$age1[df1$time1 &gt;= range1[1,] & df1$time1 &lt;= range1[w1,]]\n    out &lt;- data.frame(date = rep(as.character(range1[ceiling(w1/2),]),length(result1)),\n                      age = result1)\n    out &lt;- out[order(out$age),]\n    out_total &lt;- rbind(out_total,out)\n  }\n  output &lt;- list()\n  output$wdat &lt;- out_total\n  output$adat &lt;- out_total %&gt;% count(date)\n  output$parms &lt;- data.frame(w = w1,s =s1)\n  return(output)\n}\n\n\ncase_noti &lt;- function(timee, agee,lab = FALSE){\n\n  dat &lt;- data.frame(timee,agee) %&gt;%\n    filter(!is.na(timee) & !is.na(agee)) %&gt;%\n    count(timee)\n\n  ts &lt;- ggplot(dat, aes(x =timee, y = n)) +\n    geom_bar(stat = \"identity\") +\n    labs(y = \"Cases\") +\n    theme_minimal()\n\n  if(lab == TRUE){\n    ts\n  } else {\n    ts + theme(axis.title.x = element_blank(),\n          axis.text.x = element_blank(),\n          axis.ticks.x = element_blank())\n  }\n\n}\n\n## plot\n\nco &lt;- data.frame()\n\nfor (i in 0:6){\n  gen &lt;- seq(0,1,le=52) + i\n  co &lt;- rbind(co,gen)\n}\n\n\ndf23 &lt;- df1 %&gt;% filter(year(adm_date) == 2023) \nwwww &lt;- slide_age(time1 = df23$adm_date,\n                  age1 =  df23$age1,\n                  w1 = 7, s1=7)\n\nch &lt;- data.frame(date = wwww$adat$date,\n           c0 = as.numeric(co[1,]),\n           c1 = as.numeric(co[2,]),\n           c2 = as.numeric(co[3,]),\n           c3 = as.numeric(co[4,]),\n           c4 = as.numeric(co[5,]),\n           c5 = as.numeric(co[6,]))\n\ntshm &lt;- function(model,agelim) {\n  ts &lt;- case_noti(model$wdat$date,model$wdat$age)\n  hm &lt;- ggplot(data=model$wdat, aes(x=date, y=age)) +\n    stat_density(\n      aes(fill = after_stat(density)),\n      geom = \"raster\",\n      position = \"identity\"\n    )+\n    scale_fill_gradient(low=\"yellow\", high=\"red\")+\n    theme_minimal()+\n    scale_y_reverse(lim= rev(agelim),breaks = seq(0,6))+\n    # scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size = 8))+\n  geom_line(data = ch,aes(x = date,y = c0),col = \"white\",\n            group = 1,lwd = 0.25,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c1),col = \"white\",\n            group = 1,lwd = 0.25,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c2),col = \"white\",\n            group = 1,lwd = 0.25,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c3),col = \"white\",\n            group = 1,lwd = 0.25,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c4),col = \"white\",\n            group = 1,lwd = 0.25,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c5),col = \"white\",\n            group = 1,lwd = 0.25,alpha = 0.5)\n  ts/hm\n}\n\n\n\n\nCode\ntshm(wwww,c(0,6))"
  },
  {
    "objectID": "index.html#tsir-model",
    "href": "index.html#tsir-model",
    "title": "HFMD 2023",
    "section": "1.4 tSIR model",
    "text": "1.4 tSIR model\n\n\nCode\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(mgcv)\nlibrary(patchwork)\nlibrary(odin)\nlibrary(tsiR)\nlibrary(janitor)\n\n\n\n\nCode\ncount_dangky_week &lt;- readRDS(\"D:/OUCRU/hfmd/data/count_dangky_week.rds\")\nchild &lt;- count_dangky_week %&gt;% filter(birth_year &gt;= 2017) %&gt;% group_by(birth_week, birth_year) %&gt;%\n  summarise(n=sum(n)) %&gt;% arrange(birth_year)\ncolnames(child) &lt;- c(\"week\",\"year\",\"birth\")\n## combine week 52 and 53\n\nchild$week &lt;- ifelse(child$week == 53,52,child$week)\n\nchild &lt;- child %&gt;% group_by(year) %&gt;%\n  mutate(newn = ifelse(week == 52, sum(birth[week==52]), birth)) %&gt;%\n  {data.frame(.$week, .$year, .$newn )} %&gt;% unique() %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"birth\"))\n\nchild$week2 &lt;- seq(1:length(child$week))\n\ntime &lt;- data.frame()\n\nfor (i in 2017:2022){\n  range &lt;- child$week[child$year == i]\n  if (length(range) == 52){\n  time_add &lt;- seq.int(i + 7/365 ,(i+1) - 7/365,\n                                 length.out = length(range)) %&gt;% data.frame()\n  } else {\n  time_add &lt;- seq.int(i + 7/365 ,(i+1) - 7/365,\n                                   length.out = 52)[1:length(range)] %&gt;% data.frame()\n  }\n  time &lt;- rbind(time,time_add)\n}\n\n\nchild[,5] &lt;- time %&gt;%\n  magrittr::set_colnames(c(\"time\"))\n\n## model fitting\nfit &lt;- mgcv::gam(birth ~ s(week) + s(week2),method = \"REML\",data = child)\n\n\n\n\nCode\ncutpoint &lt;- function(point){\n  fitt &lt;- mgcv::gam(birth ~ s(week) + s(week2),\n                    method = \"REML\",data = child[-c(point:nrow(child)),])\n\n  new_data2 &lt;- data.frame(week = rep(1:52,7))\n\n  new_data2$week2 &lt;- seq(1,nrow(new_data2))\n  new_data2$year &lt;- rep(2017:2023,each = 52)\n\n  time &lt;- data.frame()\n  for (i in 2017:2023){\n    range &lt;- new_data2$week[new_data2$year == i]\n    time_add &lt;- data.frame(seq.int(i + 7/365 ,(i+1) - 7/365,\n                                   length.out = length(range)))\n    time &lt;- rbind(time,time_add)\n  }\n\n  new_data2[4] &lt;- time %&gt;%\n    magrittr::set_colnames(c(\"time\"))\n\n  est2 &lt;- predict.gam(fitt,newdata = new_data2,\n                      type=\"response\",se.fit = TRUE)\n\n  new_data2 &lt;- new_data2 %&gt;% mutate(\n    fit = est2$fit,\n    lwr = est2$fit - qt(0.95,nrow(new_data2))*est2$se.fit,\n    upr = est2$fit + qt(0.95,nrow(new_data2))*est2$se.fit,\n  )\n  out &lt;- list()\n  out$point &lt;- point\n  out$df &lt;- new_data2\n  return(out)\n}\n\n\nplot_cp &lt;- function(model){\n  dta &lt;- model$df\n  ggplot(data = dta) +\n    geom_line(aes(x = time,y = fit),col = \"blue\")+\n    geom_ribbon(aes(x = time,ymin = lwr, ymax = upr), fill = \"royalblue\",alpha = 0.4)+\n    geom_vline(xintercept = dta$time[dta$week2 == model$point])+\n    ylab(\"births\")+\n    theme_minimal()\n}\n\n\n\n\nCode\nmodel &lt;- cutpoint(270)\n\nplot_cp(model)+\n  geom_point(data = child[1:270,], aes(x = time, y = birth))+\n  annotate(\"text\", x= 2017, y=3500, label= \"Fitting\") +\n  annotate(\"text\", x = 2023.5, y=3500, label = \"Estimation\")+\n  plot_annotation(\n    title = \"Fitting data until week 10/2022\"\n  )\n\n\n\n\n\n\n\nCode\nhfmd1723 &lt;- df1 %&gt;% filter(year(adm_week) &gt;= \"2017\" & year(adm_week) &lt;= \"2023\") %&gt;%\n    filter(!is.na(adm_week) ) %&gt;%\n    count(adm_week)\n\n\nagr17 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2017\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week)) %&gt;% as.data.frame()\n\nagr17$week &lt;- ifelse(agr17$week == 53,52,agr17$week)\n\nd17 &lt;- agr17 %&gt;% mutate(newn = ifelse(week == 52, sum(n[week==52]), n),\n                        year = year(adm_week)) %&gt;%\n  {data.frame(.$week, .$year, .$newn )} %&gt;% unique() %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n## 18\n\nd18 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2018\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week),\n                                       year = year(adm_week)) %&gt;%\n  as.data.frame() %&gt;% select(week,year,n) %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n## 19\nd19 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2019\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week),\n                                       year = year(adm_week)) %&gt;%\n  as.data.frame() %&gt;% select(week,year,n) %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n## 20\nd20 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2020\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week),\n                                       year = year(adm_week)) %&gt;%\n  as.data.frame() %&gt;% select(week,year,n) %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n## 21\nd21 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2021\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week),\n                                       year = year(adm_week)) %&gt;%\n  as.data.frame() %&gt;% select(week,year,n) %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n## 22\nd22 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2022\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week),\n                                       year = year(adm_week)) %&gt;%\n  as.data.frame() %&gt;% select(week,year,n) %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n## 23\nagr23 &lt;- hfmd1723 %&gt;% filter(year(adm_week) == \"2023\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;% mutate(week = 1:length(adm_week)) %&gt;% as.data.frame()\n\nagr23$week &lt;- ifelse(agr23$week == 53,52,agr23$week)\n\nd23 &lt;- agr23 %&gt;% mutate(newn = ifelse(week == 52, sum(n[week==52]), n),\n                        year = year(adm_week)) %&gt;%\n  {data.frame(.$week, .$year, .$newn )} %&gt;% unique() %&gt;%\n  magrittr::set_colnames(c(\"week\",\"year\",\"cases\"))\n\n\ncases1723 &lt;- rbind(d17,d18,d19,d20,d21,d22,d23)\n\n\n\n\nCode\nbirth1723 &lt;- model$df %&gt;%\n  select(week,year,fit)\n\nhcm1723 &lt;- left_join(cases1723,birth1723, by = c(\"week\" = \"week\",\"year\" = \"year\"))\n\ntime &lt;- data.frame()\n\nfor (i in 2017:2023){\n  range &lt;- hcm1723$week[hcm1723$year == i]\n  if (length(range) == 52){\n    time_add &lt;- seq.int(i + 7/365 ,(i+1) - 7/365,\n                        length.out = length(range)) %&gt;% data.frame()\n  } else {\n    time_add &lt;- seq.int(i + 7/365 ,(i+1) - 7/365,\n                        length.out = 52)[1:length(range)] %&gt;% data.frame()\n  }\n  time &lt;- rbind(time,time_add)\n}\n\nhcm1723[,5] &lt;- time %&gt;%\n  magrittr::set_colnames(c(\"time\"))\n\nhcm1723 &lt;- hcm1723 %&gt;% select(time,cases,fit) %&gt;%\n  magrittr::set_colnames(c(\"time\",\"cases\",\"births\"))\n\n\n\n\nCode\ngenerator &lt;- odin::odin({\n  deriv(N) &lt;- r * N * (1 - N / K)\n  initial(N) &lt;- N0\n\n  N0 &lt;- user(1)\n  K &lt;- user(100)\n  r &lt;- user()\n})\n\n\n\n\nCode\nmod2 &lt;- generator$new(N0 = 8446000,r = 7.4/52,K= 9456700)\ny1723 &lt;- mod2$run(1:360)\n\n\n\n\nCode\nhcm1723 &lt;- cbind(hcm1723,y1723)\ncolnames(hcm1723) &lt;- c(\"time\",\"cases\",\"births\",\"t\",\"pop\")\nhcm_hfmd1723 &lt;- runtsir(data = hcm1723[,-4], IP = 1, xreg = \"cumcases\", \n                        regtype = \"gaussian\",alpha = NULL, sbar = NULL, \n                        method = \"deterministic\", nsim = 1000,\n                        family = \"gaussian\", link = \"identity\")\n\n\n\n\nCode\nplotdata(hcm1723[,-4])\n\n\n\n\n\ntSIR model fitting for the whole period\n\n\nCode\nhcm1723 %&gt;% \nggplot() +\n  geom_line(aes(x = time ,group = 1, y = hcm_hfmd1723$res$mean,\n                linetype = \"model fitted\"))+\n  geom_line(aes(x= time, group = 1, y = cases,\n                linetype = \"cases reported\"))+\n  # geom_bar(aes(x= as.character(date), y = cases),stat = \"identity\")+\n  theme_minimal()+\n  labs(y = \"Cases\",x=\"Time\")+\n    scale_linetype_manual(values = c(\"cases reported\" = \"dashed\",\n                                   \"model fitted\" = \"solid\"),\n                        name=\"Analysis Type\")+\n  geom_vline(xintercept = 2021.491,\n             alpha = 0.25,col = \"blue\",lwd = 0.5)+\n  geom_vline(xintercept = 2021.491+(7/365*4)*4,\n             alpha = 0.25,col = \"blue\",lwd = 0.5)\n\n\n\n\n\nMay be the covid quarantine effect the performance of model. Tried to fit before and after covid quanrantine\n\n\nBefore quarantine\n\n\nCode\nbefore &lt;- hcm1723[,-4] %&gt;%  filter(time &lt;= 2021.491)\nhcmbefore &lt;- runtsir(data = before, IP = 1, xreg = \"cumcases\", \n                        regtype = \"gaussian\",alpha = NULL, sbar = NULL, \n                        method = \"deterministic\", nsim = 1000,\n                        family = \"gaussian\", link = \"identity\")\n\n\n\n\nCode\nbefore %&gt;% \nggplot() +\n  geom_line(aes(x = time ,group = 1, y = hcmbefore$res$mean,\n                linetype = \"model fitted\"))+\n  geom_line(aes(x= time, group = 1, y = cases,\n                linetype = \"cases reported\"))+\n  # geom_bar(aes(x= as.character(date), y = cases),stat = \"identity\")+\n  theme_minimal()+\n  labs(y = \"Cases\",x=\"Time\")+\n    scale_linetype_manual(values = c(\"cases reported\" = \"dashed\",\n                                   \"model fitted\" = \"solid\"),\n                        name=\"Analysis Type\")\n\n\n\n\n\n\nAfter quarantine\n\n\nCode\nafter &lt;- hcm1723[,-4] %&gt;%  filter(time &gt;= 2022.189)\nhcmafter &lt;- runtsir(data = after, IP = 1, xreg = \"cumcases\", \n                        regtype = \"gaussian\",alpha = NULL, sbar = NULL, \n                        method = \"deterministic\", nsim = 1000,\n                        family = \"gaussian\", link = \"identity\")\n\n\n\n\nCode\nafter %&gt;% \nggplot() +\n  geom_line(aes(x = time ,group = 1, y = hcmafter$res$mean,\n                linetype = \"model fitted\"))+\n  geom_line(aes(x= time, group = 1, y = cases,\n                linetype = \"cases reported\"))+\n  # geom_bar(aes(x= as.character(date), y = cases),stat = \"identity\")+\n  theme_minimal()+\n  labs(y = \"Cases\",x=\"Time\")+\n    scale_linetype_manual(values = c(\"cases reported\" = \"dashed\",\n                                   \"model fitted\" = \"solid\"),\n                        name=\"Analysis Type\")"
  },
  {
    "objectID": "index.html#attack-rate",
    "href": "index.html#attack-rate",
    "title": "HFMD 2023",
    "section": "1.5 Attack rate",
    "text": "1.5 Attack rate\n\n\nCode\nw23 &lt;- slide_age(time1 = df23$adm_date,\n                  age1 =  df23$age1,\n                  w1 = 7, s1=7)\n\n\n\n\nCode\npop &lt;- readRDS(\"D:/OUCRU/hfmd/data/count_dangky.rds\")\npop_a &lt;- pop %&gt;% group_by(birth_month, birth_year) %&gt;%\n  summarise(n=sum(n)) %&gt;% arrange(birth_year)\n\ncolnames(pop_a) &lt;- c(\"m\",\"y\",\"n\")\n\npop_a$dob &lt;- str_c(pop_a$y,pop_a$m,sep = \"-\") %&gt;% ym()\n\n##\nhfmd23 &lt;- df1 %&gt;% filter(year(adm_week) == \"2023\") %&gt;%\n  filter(!is.na(adm_week) ) %&gt;%\n  count(adm_week)\n\nhfmd23$week &lt;- 1:length(hfmd23$adm_week)\nhfmd23$week &lt;- ifelse(hfmd23$week == 53,52,hfmd23$week)\n\nhfmd23$n2 &lt;- ifelse(hfmd23$week == 52, sum(hfmd23$n[hfmd23$week==52]), hfmd23$n)\n\nhfmd23 &lt;- hfmd23[-53,]\n\n##\ngenerator &lt;- odin::odin({\n  deriv(N) &lt;- r * N * (1 - N / K)\n  initial(N) &lt;- N0\n\n  N0 &lt;- user(1)\n  K &lt;- user(100)\n  r &lt;- user()\n})\n\nmod &lt;- generator$new(N0 = 9381717,r = 7.4/52,K= 9456700)\ny3 &lt;- mod$run(1:52)\n\n\n##\ndta23 &lt;- model$df %&gt;% filter(year == 2023)\nhcm23 &lt;- data.frame(time = dta23$time,\n                    cases = hfmd23$n,\n                    births = dta23$fit,\n                    pop = y3[,2])\n\nhcm_hfmd23 &lt;- runtsir(data = hcm23, IP = 1, xreg = \"cumcases\", regtype = \"gaussian\",\n                     alpha = NULL, sbar = NULL, method = \"negbin\", nsim = 100,\n                     family = \"gaussian\", link = \"identity\")\n\n\n[1] \"gaussian regressian failed -- switching to loess regression\"\n\n\n           alpha        mean beta         mean rho         mean sus \n        6.90e-01         7.62e-05         1.03e+00         9.46e+04 \nprop. init. sus. prop. init. inf. \n        7.54e-03         6.05e-06 \n\n\nCode\n## recaculate attack rate\n\ntime1 = df1$adm_date\nage1 =  df1$age1\ndob = pop_a$dob\nn = pop_a$n\n\ndft &lt;- data.frame(time1,age1) %&gt;%\n  filter(!is.na(time1) & !is.na(age1)) %&gt;%\n  arrange(time1)\n\n\ndft$agr=as.factor(cut(dft$age1, c(0,0.5,\n                                  1,1.5,\n                                  2,2.5,\n                                  3,3.5,\n                                  4,4.5,5,100), right=TRUE ))\nlevels (dft$agr) = c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                     \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                     \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                     \"4.5-5\",\"5+\")\n\nsus_pop &lt;- data.frame(dob = dob, n = n)\n\nout_total &lt;- data.frame()\ndateaa &lt;- hfmd23$adm_week+3\n\nsus_pop &lt;- data.frame(dob = dob, n = n)\n\nfor (i in 1:52){\n  sus_pop$age &lt;- interval(sus_pop$dob, dateaa[i]) / years(1)\n\n  sus_pop$agr=as.factor(cut(sus_pop$age, c(0,0.5,\n                                           1,1.5,\n                                           2,2.5,\n                                           3,3.5,\n                                           4,4.5,5,100), right=TRUE ))\n  levels (sus_pop$agr) = c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                           \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                           \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                           \"4.5-5\",\"5+\")\n  outcum &lt;- sus_pop %&gt;% group_by(agr) %&gt;%\n    summarise(n = sum(n)) %&gt;%\n    as.data.frame()\n  outcum$date &lt;- rep(dateaa[i],nrow(outcum))\n  out_total &lt;- rbind(out_total,outcum)\n}\n\ndeno &lt;- out_total %&gt;%\n  pivot_wider(names_from = agr, values_from = n) %&gt;% as.data.frame()\n\ncasss &lt;- wwww$wdat\n\ncasss$agr=as.factor(cut(casss$age, c(0,0.5,1,1.5,2,2.5,\n                                     3,3.5,4,4.5,5,100), right=TRUE ))\nlevels (casss$agr) = c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                       \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                       \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                       \"4.5-5\",\"5+\")\n\ncasss &lt;- casss %&gt;% group_by(date,agr) %&gt;%\n  count() %&gt;% pivot_wider(names_from = agr, values_from = n) %&gt;% as.data.frame()\n\ncasss &lt;- casss[,-13]\ncasss &lt;- replace(casss,is.na(casss), 0)\ncasss &lt;- casss[,c(1:10,12,11)]\n\natkr &lt;- data.frame()\n\natkr &lt;- rbind(atkr,as.numeric(casss[1,-1])/as.numeric(deno[1,-1]))\nfor (i in 1:51){\n  new &lt;- as.numeric(casss[i+1,-1])/(as.numeric(deno[i+1,-1]) - as.numeric(casss[i,-1]))\n  atkr &lt;- rbind(atkr,new)\n}\natkr &lt;- cbind(deno$date,atkr)\n\ncolnames(atkr) &lt;- colnames(deno)\natkr &lt;- replace(atkr,is.na(atkr), 0)\n\natk_plot &lt;- atkr %&gt;% pivot_longer(cols=c(\"0-0.5\", \"0.5-1\", \"1.0-1.5\",\n                                         \"1.5-2\",\"2-2.5\",\"2.5-3\",\n                                         \"3-3.5\",\"3.5-4\",\"4-4.5\",\n                                         \"4.5-5\",\"5+\"),\n                                  names_to= 'agr',\n                                  values_to='atk') %&gt;% as.data.frame()\n\n\n\n\nCode\nbeta &lt;- hcm_hfmd23$contact\nbeta[52,] &lt;- beta[51,]\n\natk &lt;- ggplot(atk_plot, aes(x=as.character(date), y=agr, fill = atk)) +\n  geom_raster()+\n  scale_fill_gradient(low=\"yellow\", high=\"red\",\n                        name = \"Attack rate\")+\n  scale_y_discrete(limits=rev)+\n  theme_minimal()+\n  labs(y = \"Age group\")+\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.text.y = element_text(size = 8),\n        legend.text = element_text(size=4),\n        legend.title = element_text(size=7))\n\nc &lt;- ggplot(data = hcm23 %&gt;%\n  select(time,cases) %&gt;% mutate(date = hfmd23$adm_week + 3)) +\n  geom_line(aes(x= as.character(date), group = 1, y = cases,\n                linetype = \"cases reported\"))+\n  # geom_bar(aes(x= as.character(date), y = cases),stat = \"identity\")+\n  geom_line(aes(x = as.character(date) ,group = 1, y = hcm_hfmd23$res$mean,\n                linetype = \"model fitted\"))+\n  geom_line(aes(x = as.character(date),\n                y= beta$beta*15000000,\n                group =1,col = \"contact rate\"),alpha = 0.3,inherit.aes = FALSE) +\n  scale_color_manual(values = c(\"contact rate\" = \"blue\"),\n                     name=\"Analysis Type\")+\n  scale_linetype_manual(values = c(\"cases reported\" = \"dashed\",\"model fitted\" = \"solid\"),\n                        name=\"Analysis Type\")+\n  scale_y_continuous(\n    name = \"Cases\",\n    # Add a second axis and specify its features\n    sec.axis = sec_axis(~./15000000, name=\"Contact rate\")\n  )+\n  theme_minimal()+\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        legend.title= element_blank(),\n        legend.position = \"inside\",\n        legend.position.inside =  c(.15, .60))+\n  geom_vline(xintercept = as.character(\"2023-05-24\"))+\n  geom_vline(xintercept = as.character(\"2023-09-06\"))+\n  annotate(\n    geom = \"text\", x = as.character(\"2023-05-31\"), y = 3500,\n    label = \"Summer break\", hjust = 0, vjust = 1, size = 3\n  )\n\nhmc &lt;- ggplot(data=w23$wdat, aes(x=date, y=age)) +\n  stat_density(\n    aes(fill = after_stat(density)),\n    geom = \"raster\",\n    position = \"identity\"\n  )+\n  scale_fill_gradient(low=\"yellow\", high=\"red\")+\n  geom_line(data = ch,aes(x = date,y = c0),col = \"white\",\n            group = 1,lwd = 0.5,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c1),col = \"white\",\n            group = 1,lwd = 0.5,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c2),col = \"white\",\n            group = 1,lwd = 0.5,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c3),col = \"white\",\n            group = 1,lwd = 0.5,alpha = 0.5)+\n  geom_line(data = ch,aes(x = date,y = c4),col = \"white\",\n            group = 1,lwd = 0.5,alpha = 0.5)+\n  scale_y_reverse(lim= rev(c(0,5)))+\n  theme_minimal()+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size = 8),\n        legend.text = element_text(size=4),\n        legend.title = element_text(size=7))\n\n\n\n\nCode\nc/\natk/\nhmc"
  }
]