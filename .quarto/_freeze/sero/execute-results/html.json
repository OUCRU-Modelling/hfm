{
  "hash": "2fe4b01c350889f00b472b87bb7789f4",
  "result": {
    "markdown": "---\ntitle: \"HFMD Seroprevalence\"\nformat: \n  html:\n    page-layout: full\n    toc: true\n    fig-format: svg\nknitr:\n  opts_chunk:\n    out.width: \"100%\"\n    out.height: \"100%\"\neditor: visual\necho: true\nwarning: false\nmessage: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(magrittr)\nlibrary(mgcv)\nlibrary(tidyverse)\nlibrary(patchwork)\n```\n:::\n\n\n# Import data\n\n\n::: {.cell}\n\n```{.r .cell-code}\napr_2023 <- read_excel(\"D:/OUCRU/hfmd/data/4_2023.xlsx\")\naug_2023 <- read_excel(\"D:/OUCRU/hfmd/data/08_2023.xlsx\")\ndec_2022 <- read_excel(\"D:/OUCRU/hfmd/data/12_2022.xls\")\ndec_2023 <- read_excel(\"D:/OUCRU/hfmd/data/12_2023.xlsx\")\n\nt423 <- data.frame(apr_2023[-c(1,2),10:14])\nt423$pos <- replace(t423$...14,is.na(t423$...14),0) %>%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %>%\n  as.integer(as.logical())\ncolnames(t423) <- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt423$age <- as.numeric(t423$age)\n\n\nt823 <- data.frame(aug_2023[-c(1,2),c(9,14:17)])\nt823$pos <- str_detect(t823$...17,regex(paste(2^(4:10), collapse = \"|\"))) %>%\n  as.integer(as.logical())\ncolnames(t823) <- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt823$age <- as.numeric(t823$age)\n\n\nt1222 <- data.frame(dec_2022[-c(1,2),10:14])\nt1222$pos <- replace(t1222$...14,is.na(t1222$...14),0) %>%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %>%\n  as.integer(as.logical())\ncolnames(t1222) <- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt1222$age <- as.numeric(t1222$age)\n\n\nt1223 <- data.frame(dec_2023[-c(1,2),c(9,14:17)])\nt1223$pos <- replace(t1223$...17,is.na(t1223$...17),0) %>%\n  str_detect(regex(paste(2^(4:10), collapse = \"|\"))) %>%\n  as.integer(as.logical())\ncolnames(t1223) <- c(\"age\",\"col_day\",\"col_month\",\"col_year\",\"neutralization\",\"pos\")\nt1223$age <- as.numeric(t1223$age)\n```\n:::\n\n\n# Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict2 <- function(x, ci = .95, le = 512, m = 100) {\n  p <- (1 - ci) / 2\n\n  link_inv <- x$family$linkinv\n  dataset <- x$data\n  n <- nrow(dataset) - length(x$coefficients)\n  age_range <- range(dataset$age)\n\n  ages <- seq(age_range[1], age_range[2], le = le)\n\n  x |>\n    predict(data.frame(age = ages), se.fit = TRUE) |>\n    extract(c(\"fit\", \"se.fit\")) %>%\n    c(age = list(ages), .) |>\n    as_tibble() |>\n    mutate(lwr = m * link_inv(fit + qt(    p, n) * se.fit),\n           upr = m * link_inv(fit + qt(1 - p, n) * se.fit),\n           fit = m * link_inv(fit)) |>\n    select(- se.fit)\n}\n```\n:::\n\n\n\n# Seroprevalence by age\n\n## Fit by GLM \n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- 100\neps <- 1\n\nplot1222 <-  glm(pos ~ age, binomial, data = t1222) |>\n  predict2() %>% as.data.frame() %>%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5)+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence(%)\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",size = 3,\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.title= element_blank(),\n    legend.position = \"inside\",\n    legend.position.inside =  c(0.15,0.80),\n    legend.text = element_text(size = 15))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1222 <-  glm(pos ~ age, binomial, data = t1222) |>\n  predict2() %>% as.data.frame() %>%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2022\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#0808cf\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2022\" = \"#0808cf\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t1222, aes(x = age,y = m * pos + eps),shape = \"|\",\n             col = \"#0808cf\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2022\"),size = 6)\n\nplot0423 <-  glm(pos ~ age + I(age ^2), binomial, data = t423) |>\n  predict2() %>% as.data.frame() %>%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Apr 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed097b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Apr 2023\" = \"#ed097b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t423, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed097b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Apr 2023\"),size = 6)\n\nplot0823 <-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t823) |>\n  predict2() %>% as.data.frame() %>%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Aug 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#ed6b00\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Aug 2023\" = \"#ed6b00\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t823, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#ed6b00\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Aug 2023\"),size = 6)\n\nplot1223 <-  glm(pos ~ age + I(age^2) + I(age^3), binomial, data = t1223) |>\n  predict2() %>% as.data.frame() %>%\n  ggplot(aes(x = age,y = fit))+\n  geom_line(aes(col = \"Dec 2023\"))+\n  geom_ribbon(aes(x = age,y = fit,\n                  ymin=lwr, ymax=upr),alpha = 0.5,fill = \"#33516b\")+\n  ylim(0,101)+\n  theme_minimal()+\n  scale_color_manual(name = \"Y series\",\n                     values = c(\"Dec 2023\" = \"#33516b\"))+\n  labs(y = \"Seroprevalence (%)\")+\n  geom_point(data= t1223, aes(x = age, m * pos + eps),\n             shape = \"|\",\n             col = \"#33516b\")+\n  theme(\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    legend.position = \"hide\",\n    legend.text = element_text(size = 15),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))+\n  annotate(\"text\", x = 3, y = 90, label = c(\"Dec 2023\"),size = 6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1222 + plot0423 + plot0823 + plot1223\n```\n\n::: {.cell-output-display}\n![](sero_files/figure-html/unnamed-chunk-6-1.svg){width=100% height=100%}\n:::\n:::\n\n\n# Model age and time at the same time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\nlibrary(scam)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\natdf <- rbind(t1222,t423,t823,t1223) %>%\n  mutate(col_date = make_date(year = col_year,\n                              month = col_month,\n                              day = col_day)) %>%\n  select(age,col_date,pos)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(atdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         age   col_date pos\n1 0.36986301 2022-12-28   0\n2 0.33150685 2022-12-27   0\n3 0.07671233 2023-01-04   0\n4 0.43835616 2022-12-27   0\n5 0.93150685 2023-01-03   0\n6 1.95616438 2022-12-26   1\n```\n:::\n:::\n\n\n\n## Fit with SCAM model\n\nmpi is monotone increasing SCOP-splines: bs=\"mpi\". To achieve monotone increasing smooths this reparameterizes the coefficients so that they form an increasing sequence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1 <- scam(pos~s(age,bs = \"mpi\")+s(col_date),family=binomial,\n           mutate(atdf, across(col_date, as.numeric)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nage_val <- c(.1, 1:14)\ncollection_date_val <- seq(min(atdf$col_date),\n                           max(atdf$col_date), le = 20)\nnew_data <- expand.grid(age = age_val,\n                        col_date = as.numeric(collection_date_val))\n\nscamf <- cbind(new_data, fit = 100 * predict(s1, new_data,\"response\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ly(scamf, x = ~sort(unique(as.Date(col_date))),\n        y = ~sort(unique(age)),\n        z = ~matrix(fit, 15),\n        showscale = F) %>%\n  add_surface()%>%\n  layout(scene = list(\n    xaxis = list(title = \"Collection date\"),\n    yaxis = list(title = \"Age\"),\n    zaxis = list(title = \"Seroprevalence\",range = c(0,100))\n  )) %>% layout(autosize = F, width = 1000, height = 1500, margin = m)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-cb7a76b608aea2f8bde1\" style=\"width:100%;height:100%;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cb7a76b608aea2f8bde1\">{\"x\":{\"visdat\":{\"6c2c14844857\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"6c2c14844857\",\"attrs\":{\"6c2c14844857\":{\"x\":{},\"y\":{},\"z\":{},\"showscale\":false,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"surface\",\"inherit\":true}},\"layout\":{\"width\":1000,\"height\":1500,\"margin\":100,\"scene\":{\"xaxis\":{\"title\":\"Collection date\"},\"yaxis\":{\"title\":\"Age\"},\"zaxis\":{\"title\":\"Seroprevalence\",\"range\":[0,100]}},\"autosize\":false,\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"colorbar\":{\"title\":\"matrix(fit, 15)\",\"ticklen\":2},\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666667\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333333\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666667\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.375\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333333\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666667\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.875\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":false,\"x\":[\"2022-12-06\",\"2022-12-25\",\"2023-01-14\",\"2023-02-03\",\"2023-02-23\",\"2023-03-15\",\"2023-04-04\",\"2023-04-24\",\"2023-05-14\",\"2023-06-03\",\"2023-06-23\",\"2023-07-13\",\"2023-08-02\",\"2023-08-22\",\"2023-09-11\",\"2023-10-01\",\"2023-10-21\",\"2023-11-10\",\"2023-11-30\",\"2023-12-20\"],\"y\":[0.10000000000000001,1,2,3,4,5,6,7,8,9,10,11,12,13,14],\"z\":[[7.7787158358284714,7.9479909184849733,8.1218133099590464,8.298077168804797,8.4738369341902651,8.6459363614086335,8.8110065323191264,8.965923703052324,9.1085946160152051,9.2359334051247917,9.3446401308522642,9.4313992024402111,9.4929372862802026,9.5261857899858686,9.5310137519290148,9.5123017915298682,9.4757132245419555,9.4269468769839015,9.3716575383810223,9.3151479728834872],[11.834532352259973,12.080505749126733,12.332597826393361,12.587726232235935,12.841620662453558,13.089740982705472,13.327276000598816,13.549800296935178,13.7543917405347,13.936720290293641,14.092164838458107,14.216089633798527,14.303916320478791,14.351343151991406,14.358228458180697,14.331540676983288,14.279340370462149,14.209732959782716,14.130768841800654,14.050011423900596],[17.631415582679782,17.973311737278092,18.322745753432272,18.675396121089253,19.025353874300013,19.366405571684105,19.692033611938104,19.996311659908908,20.275411614301962,20.523612424405886,20.734824316472569,20.902950478999117,21.021964817667886,21.086185502927801,21.095506123484704,21.059375025258468,20.988673383192125,20.894332072760434,20.787222069015449,20.677583539819853],[24.019760408082259,24.44876515186094,24.885898909635131,25.325700020234933,25.760802407519069,26.183552759001433,26.586011660074192,26.961051794053891,27.304185845707845,27.608632641197449,27.867191769026611,28.072668105311976,28.217941127931169,28.296268881595516,28.307633298515128,28.263574368377427,28.177319550681457,28.062142357536953,27.931262131088115,27.797166196067341],[30.091132727622561,30.58492488790754,31.086628077215721,31.589926423969295,32.086406771248342,32.567425820590437,33.02411010800887,33.448591268752857,33.836042360866067,34.179077744452229,34.469870446107123,34.700610732400101,34.863557790056397,34.951350525795192,34.964084450774848,34.914710753222558,34.818009804852601,34.688798375499729,34.541851868002801,34.391163836182962],[35.176478816790009,35.711092739254774,36.25296766367839,36.795249569258708,37.328898714168609,37.844714577833422,38.33333301960046,38.786536854571175,39.19940031660731,39.564295731723838,39.873150297029078,40.117916869396737,40.2906065572164,40.383592692916345,40.397076656810739,40.344790229458134,40.24234879551252,40.10539301928371,39.949536332538052,39.78959744048661],[39.104833777259444,39.662621228754539,40.2269378741384,40.790626497299129,41.344317171907647,41.878541643901869,42.383727118410107,42.851541649743552,43.277083800457206,43.652684690895164,43.970234531370707,44.221654095934262,44.398911200194071,44.494313400907799,44.508145204631177,44.454506413791414,44.349387610395397,44.208794939106518,44.048719387913991,43.884362466671554],[42.083856420198735,42.654372248326908,43.230757155037267,43.805689861154264,44.36963797545576,44.913021280541507,45.426202307826863,45.900845170645368,46.332118614063646,46.712398824672377,47.033627668918477,47.287780199858794,47.466868653764934,47.563223854288886,47.57719193162945,47.523022001465357,47.416841349311831,47.274785116976297,47.112982725709216,46.946785752370666],[44.336240874427531,44.9136119474135,45.496305041312169,46.076912627399707,46.645829070221154,47.193440047178292,47.710110355958314,48.187545769104936,48.620994845186821,49.002908027246598,49.325308081658136,49.580252278860677,49.759827011800198,49.856419376504604,49.870420413852898,49.81612065356488,49.709669821666779,49.567219608468605,49.404923122501167,49.238168331014187],[46.036511311516676,46.617480802171066,47.203337252153176,47.786629576335834,48.357724772401092,48.907010888988069,49.424882571769388,49.903101246522105,50.336989765684748,50.719076076170388,51.041466305877513,51.296301695445123,51.47574625298099,51.572250301747303,51.586237475964793,51.531989980191781,51.425629874654064,51.283276750626804,51.121056947177856,50.954343286532698],[47.355354705955435,47.938182528374561,48.525549105538474,49.109982319331067,49.681844308877274,50.231541290989632,50.749507261561035,51.227560595710145,51.661089557546127,52.042694273870957,52.364558053408615,52.618899561596791,52.797955176813183,52.894235989814973,52.908189992383484,52.854069995354315,52.747950848267287,52.605901523798195,52.444001815090694,52.277588137772355],[48.444114359656723,49.027862782965919,49.615856633601737,50.200614811404677,50.7725061266148,51.321962372682798,51.839460451666838,52.316874539818713,52.749651754480034,53.130459426440183,53.451552478468557,53.705221242680892,53.883769527198922,53.979766024325201,53.993678152747307,53.939719618557945,53.833909683043125,53.692258948493432,53.530792146692782,53.364799700248412],[49.417705768516107,50.001807827395197,50.589889272480903,51.17446738059288,51.745925048150397,52.294724932770421,52.811390133126714,53.287851275958687,53.719611654607661,54.099404327645139,54.419554093537506,54.672421094672288,54.85037512306409,54.946041900905648,54.959905652602757,54.906133911133395,54.800683713361877,54.659500979952604,54.498548671610372,54.333064058328937],[50.328601966718921,50.912633712374955,51.500393301973659,52.084401962751002,52.655062665039907,53.202873693139182,53.718407945281534,54.193654331094166,54.624171609794928,55.002759000976695,55.321811511706329,55.573759337044926,55.751038718288569,55.846333327155385,55.860142595113984,55.806581396100754,55.70153800449922,55.560887310622732,55.400523920885924,55.235625231424898],[51.213725245966302,51.797317383455507,52.384390988020336,52.967476180201544,53.537001779271655,54.083506866815391,54.597618723654037,55.071387841812914,55.500429461713075,55.877611285501906,56.195400883910793,56.446300777952004,56.622816019339226,56.717690733840755,56.731438624289964,56.678114737571271,56.573530897597301,56.433483373446272,56.273790702342787,56.109562822238999]],\"type\":\"surface\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n",
    "supporting": [
      "sero_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\r\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}